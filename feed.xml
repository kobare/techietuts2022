<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2023-03-26T13:08:55+03:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Techietuts</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Caching in Rails</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202303/caching-in-rails" rel="alternate" type="text/html" title="Caching in Rails" /><published>2023-03-26T11:40:00+03:00</published><updated>2023-03-26T11:40:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202303/caching-in-rails</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202303/caching-in-rails">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Rails provides several types of caching to help improve the performance of your 
application. The three most commonly used types of caching are fragment caching, 
action caching, and HTTP caching. Let’s take a closer look at each type of caching 
and when to use it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;page-caching&quot;&gt;Page Caching&lt;/h3&gt;

&lt;p&gt;Page caching is the simplest form of caching available in Rails 7. It involves 
saving the entire HTML response of a page to a file and serving the same file for 
subsequent requests. This type of caching is useful for pages that don’t have any 
dynamic content, such as homepages, about us pages, or other static pages.&lt;/p&gt;

&lt;p&gt;To enable page caching, you can use the caches_page method in your controller, like this:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;caches_page&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# code to render the page&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
In this example, the &lt;span class=&quot;badge&quot;&gt;caches_page&lt;/span&gt; method caches the 
HTML response for the &lt;span class=&quot;badge&quot;&gt;index&lt;/span&gt; action of the 
&lt;span class=&quot;badge&quot;&gt;HomeController&lt;/span&gt; class. Whenever a user requests 
the &lt;span class=&quot;badge&quot;&gt;index&lt;/span&gt; page, Rails will serve the cached HTML 
response instead of rendering the page again.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;fragment-caching&quot;&gt;Fragment Caching:&lt;/h3&gt;

&lt;p&gt;Fragment caching is used to cache parts of a view that are expensive to generate. 
For example, if you have a page that includes a list of articles and each article 
has many comments, rendering the page may take a long time if you have to load 
all the comments for each article on every request. To speed up the rendering process, 
you can use fragment caching to cache the comments for each article separately.&lt;/p&gt;

&lt;p&gt;To use fragment caching, wrap the expensive code in a cache block like this:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;article.comments&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;article.comments&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will cache the output of the expensive code and use it on subsequent requests, 
avoiding the need to regenerate it each time. In this example, the comments for 
each article are cached separately, so if a new comment is added to one of the articles, 
only the cached fragment for that article will be invalidated.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;action-caching&quot;&gt;Action Caching:&lt;/h3&gt;

&lt;p&gt;Action Caching works like Page Caching except the incoming web request hits the 
Rails stack so that &lt;span class=&quot;badge&quot;&gt;before&lt;/span&gt; filters can be run on it 
before the cache is served.&lt;/p&gt;

&lt;p&gt;This ensures that any actions needing to take place before the cached copy is hit 
can be performed. Therefore increasing performance while taking into account the 
functionality required to access parts of your application.&lt;/p&gt;

&lt;p&gt;Suppose you have a before filter that checks whether the user is authorized to 
view the article. If the user is authorized, the cached copy of the article is 
served, and if the user is not authorized, the before filter redirects the user 
to the login page.&lt;/p&gt;

&lt;p&gt;Here’s an example of how you can use Action Caching in your Rails 7 application:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArticlesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authenticate_user!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;except: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... other code to render the article page ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cache_action&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cache_action&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Cache-Control&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;public, max-age=300&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expires_in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
In this example, we have a &lt;span class=&quot;badge&quot;&gt;before_action :authenticate_user!&lt;/span&gt;, 
which ensures that only authenticated users can view the article. In the show 
action, we use cache_action to cache the output of the action for 5 minutes, 
but only if the current user is not an admin. This ensures that non-admin users 
get the cached copy of the article, and the before_filter 
&lt;span class=&quot;badge&quot;&gt;:authenticate_user!&lt;/span&gt; is executed before serving the cached copy.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;http-caching&quot;&gt;HTTP Caching:&lt;/h3&gt;

&lt;p&gt;HTTP caching is used to cache responses from the server and avoid unnecessary 
network requests. For example, if you have a page that displays a list of products, 
you can use HTTP caching to allow the client to cache the response and avoid 
downloading unnecessary data.&lt;/p&gt;

&lt;p&gt;To use HTTP caching, add the following code to your controller action:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fresh_when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_modified: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maximum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;public: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will set the &lt;span class=&quot;badge&quot;&gt;Last-Modified&lt;/span&gt; and 
&lt;span class=&quot;badge&quot;&gt;ETag&lt;/span&gt; headers on the response, allowing the 
client to make conditional requests and avoid downloading unnecessary data. 
In this example, the response will be cached based on the 
&lt;span class=&quot;badge&quot;&gt;last_modified&lt;/span&gt; timestamp of the products, so if a new 
product is added or an existing product is updated, the cached response will be 
invalidated and regenerated.&lt;/p&gt;

&lt;p&gt;In addition to these types of caching, Rails also provides other caching mechanisms 
like low-level caching and Russian doll caching. Low-level caching is used to cache 
arbitrary objects, such as database queries or API responses. Russian doll caching 
is used to cache nested fragments of a view, which can be useful when you have 
complex views with many nested elements.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;When using caching in your Rails application, it’s important to consider the 
trade-offs between performance and complexity. Caching can significantly improve 
the performance of your application, but it can also introduce some complexity 
and potential issues, such as cache invalidation and cache consistency. 
Be sure to test your application thoroughly with caching enabled and monitor its 
performance to ensure that it’s working as expected.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Nginx: Features, Benefits, and Use Cases</title><link href="http://0.0.0.0:4000/category/more-topics/cloud-services/servers/202303/nginx-features-benefits-and-use-uases" rel="alternate" type="text/html" title="Nginx: Features, Benefits, and Use Cases" /><published>2023-03-19T12:00:00+03:00</published><updated>2023-03-19T12:00:00+03:00</updated><id>http://0.0.0.0:4000/category/more-topics/cloud-services/servers/202303/nginx-features-benefits-and-use-uases</id><content type="html" xml:base="http://0.0.0.0:4000/category/more-topics/cloud-services/servers/202303/nginx-features-benefits-and-use-uases">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Nginx is a high-performance, open-source web server and reverse proxy software 
that has gained widespread popularity in recent years. It is known for its speed, 
scalability, and flexibility, and is used by some of the world’s largest websites 
and applications.&lt;/p&gt;

&lt;p&gt;In this guide, we’ll take a closer look at what Nginx is, what features it offers, 
and some of the benefits and use cases for using Nginx in your web applications.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;definition&quot;&gt;Definition&lt;/h3&gt;

&lt;p&gt;Nginx (pronounced “engine-x”) is a lightweight, open-source HTTP server software 
that was first released in 2004. It was designed to be a high-performance alternative 
to the Apache HTTP Server, which was the dominant web server software at the time.&lt;/p&gt;

&lt;p&gt;Nginx is often used as a reverse proxy server or load balancer, which means it 
sits in front of web servers and handles incoming client requests, forwarding 
them to the appropriate backend server to generate a response. It is also commonly 
used to serve static content, such as HTML, CSS, JavaScript, and images, as well 
as dynamic content generated by applications running on a backend server.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;features-of-nginx&quot;&gt;Features of Nginx&lt;/h3&gt;

&lt;p&gt;Nginx offers a wide range of features that make it a popular choice for web 
developers and administrators. Here are some of the key features of Nginx:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;High Performance: Nginx is known for its high performance and low resource usage. 
It can handle large amounts of traffic and is optimized for serving static content 
and handling multiple concurrent connections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scalability: Nginx can be used as a load balancer to distribute incoming traffic 
among multiple servers, helping to improve scalability and availability of web 
applications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reverse Proxy: Nginx can act as a reverse proxy to protect backend servers from 
direct exposure to the internet, as well as provide additional security features 
such as SSL termination, authentication, and access control.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Caching: Nginx can serve as a cache for static content, helping to reduce the 
load on backend servers and improve response times for clients. It can also cache 
dynamic content with appropriate headers to improve application performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSL/TLS termination: Nginx can terminate SSL/TLS connections and pass unencrypted 
traffic to the backend server, reducing the load on the server and allowing for 
more efficient handling of SSL/TLS connections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content filtering: Nginx can be used to filter and block specific types of 
traffic based on content or other criteria, providing an additional layer of 
security for web applications.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;benefits-of-using-nginx&quot;&gt;Benefits of using Nginx&lt;/h3&gt;

&lt;p&gt;Using Nginx as a web server or reverse proxy server can provide several benefits 
for web developers and administrators. Here are some of the key benefits of using Nginx:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Improved Performance: Nginx is optimized for serving static content and handling 
multiple concurrent connections, helping to improve the performance of web applications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enhanced Security: Nginx can act as a reverse proxy to protect backend servers 
from direct exposure to the internet, as well as provide additional security 
features such as SSL termination, authentication, and access control.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scalability: Nginx can be used as a load balancer to distribute incoming 
traffic among multiple servers, helping to improve scalability and availability 
of web applications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flexible Configuration: Nginx offers a flexible and powerful configuration 
language that allows administrators to customize the behavior of the server to 
meet their specific needs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Open Source: Nginx is an open-source software, which means that it is freely 
available for download and can be modified and distributed under the terms of the license.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;use-cases-for-nginx&quot;&gt;Use Cases for Nginx&lt;/h3&gt;

&lt;p&gt;Nginx can be used in a wide range of applications and use cases, including but not limited to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Serving Static Content: Nginx can serve static content such as HTML, CSS, 
JavaScript, and images, providing a high-performance and efficient way to deliver web content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Load Balancing: Nginx can be used as a load balancer to distribute incoming 
traffic among multiple servers, helping to improve the availability and scalability 
of web applications.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reverse Proxy: Nginx can act as a reverse proxy to protect backend servers 
from direct exposure to the internet, as well as provide additional security 
features such as SSL termination, authentication, and access control.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Caching: Nginx can serve as a cache for static content, helping to reduce the 
load on backend servers and improve response times for clients. It can also cache 
dynamic content with appropriate headers to improve application performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSL/TLS Termination: Nginx can terminate SSL/TLS connections and pass unencrypted 
traffic to the backend server, reducing the load on the server and allowing for 
more efficient handling of SSL/TLS connections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Content Filtering: Nginx can be used to filter and block specific types of 
traffic based on content or other criteria, providing an additional layer of 
security for web applications.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Nginx is a high-performance, flexible, and powerful web server and reverse proxy 
software that has become increasingly popular in recent years. Its ability to 
handle large amounts of traffic, serve static content efficiently, act as a load 
balancer, and provide additional security features make it a popular choice for 
web developers and administrators.&lt;/p&gt;

&lt;p&gt;In this guide, we’ve explored the key features and benefits of Nginx, as well as 
some common use cases for using Nginx in web applications. Whether you’re serving 
static content, distributing traffic among multiple servers, or protecting backend 
servers from direct exposure to the internet, Nginx is a versatile tool that can 
help you improve the performance, scalability, and security of your web applications.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="more-topics" /><summary type="html">Introduction</summary></entry><entry><title type="html">Rails Migrations Basics</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202303/rails-migrations-basics" rel="alternate" type="text/html" title="Rails Migrations Basics" /><published>2023-03-12T09:35:00+03:00</published><updated>2023-03-12T09:35:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202303/rails-migrations-basics</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202303/rails-migrations-basics">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Rails Migrations are a powerful tool that allows developers to manage database 
changes and schema updates in a version-controlled and consistent way. Migrations 
help developers to easily modify the structure of their application’s database, 
and they are a key component of the Ruby on Rails framework.&lt;/p&gt;

&lt;p&gt;In this section, we’ll cover the basics of how to create, modify, and manage 
migrations in a Rails application.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;creating-a-migration&quot;&gt;Creating a Migration&lt;/h3&gt;

&lt;p&gt;To create a new migration in a Rails application, you can use the 
&lt;span class=&quot;badge&quot;&gt;rails generate&lt;/span&gt; command followed by the migration name 
and the list of attributes that you want to add to the database table. For example, 
to create a migration that adds a new column to the users table, you can run the 
following command:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails generate migration add_email_to_users email:string&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will create a new migration file in the &lt;span class=&quot;badge&quot;&gt;db/migrate&lt;/span&gt; 
directory with a name that looks something like 
&lt;span class=&quot;badge&quot;&gt;20210312132235_add_email_to_users.rb&lt;/span&gt;. The name of the 
migration file includes a timestamp to ensure that each migration is executed in 
the correct order.&lt;/p&gt;

&lt;p&gt;The migration file will contain two methods: &lt;span class=&quot;badge&quot;&gt;up&lt;/span&gt; and 
&lt;span class=&quot;badge&quot;&gt;down&lt;/span&gt;. The &lt;span class=&quot;badge&quot;&gt;up&lt;/span&gt; method is used 
to define the changes that need to be made to the database, and the 
&lt;span class=&quot;badge&quot;&gt;down&lt;/span&gt; method is used to define how to revert those changes.&lt;/p&gt;

&lt;p&gt;Here’s an example of what the up method might look like for the 
&lt;span class=&quot;badge&quot;&gt;add_email_to_users&lt;/span&gt; migration:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add_column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This code will add a new column named email to the users table with a data type 
of string.&lt;/p&gt;

&lt;p&gt;The &lt;span class=&quot;badge&quot;&gt;down&lt;/span&gt; method is used to undo the changes made by 
the &lt;span class=&quot;badge&quot;&gt;up&lt;/span&gt; method. Here’s an example of what the 
&lt;span class=&quot;badge&quot;&gt;down&lt;/span&gt; method might look like for the 
&lt;span class=&quot;badge&quot;&gt;add_email_to_users&lt;/span&gt; migration:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;down&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;remove_column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This code will remove the email column from the users table.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;running-migrations&quot;&gt;Running Migrations&lt;/h3&gt;

&lt;p&gt;Once you’ve created a migration, you can run it by running the following command:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails db:migrate&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will execute all the pending migrations in your application. Rails keeps 
track of which migrations have already been run, so running 
&lt;span class=&quot;badge&quot;&gt;rails db:migrate&lt;/span&gt; multiple times will not apply the 
same migration more than once.&lt;/p&gt;

&lt;p&gt;You can also roll back a migration by running the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails db:rollback&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will undo the last migration that was applied. You can roll back multiple 
migrations by specifying the number of migrations to roll back:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails db:rollback &lt;span class=&quot;nv&quot;&gt;STEP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will roll back the last two migrations that were applied.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;modifying-a-migration&quot;&gt;Modifying a Migration&lt;/h3&gt;

&lt;p&gt;If you need to modify an existing migration, you can edit the migration file directly. 
However, you should be aware that once a migration has been run, it should not 
be modified unless absolutely necessary. Modifying a migration that has already 
been applied can cause issues with the consistency of your database schema.&lt;/p&gt;

&lt;p&gt;If you need to make a change to a migration that has already been run, you 
should create a new migration that modifies the existing schema. For example, 
if you need to rename a column that was added in a previous migration, you could 
create a new migration that renames the column:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails generate migration rename_email_column_in_users&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will create a new migration file that you can use to rename the column. 
Here’s an example of what the up method might look like:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rename_column&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new_email&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This code will rename the email column to new_email.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;adding-indexes&quot;&gt;Adding Indexes&lt;/h3&gt;

&lt;p&gt;Adding indexes to your database tables can help to improve query performance. 
You can create an index on a column in a table using a migration. Here’s an 
example of how to create an index on the email column in the users table:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add_index&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This code will create an index on the email column in the users table. Rails will 
automatically generate a name for the index based on the table and column names.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dropping-tables&quot;&gt;Dropping Tables&lt;/h3&gt;

&lt;p&gt;If you need to remove a table from your database, you can do so using a migration. 
Here’s an example of how to remove the users table:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;change&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;drop_table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This code will remove the users table from your database.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Migrations are a powerful tool that allow you to manage database changes and 
schema updates in a version-controlled and consistent way. In this tutorial, 
we covered the basics of how to create, modify, and manage migrations in a 
Rails application.&lt;/p&gt;

&lt;p&gt;Remember that once a migration has been applied, it should not be modified unless 
absolutely necessary. If you need to make a change to a migration that has already 
been applied, create a new migration that modifies the existing schema.&lt;/p&gt;

&lt;p&gt;With Rails Migrations, you can easily modify the structure of your application’s 
database and keep your schema in sync with your application’s code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Debugging Rails applications with Pry or Byebug</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/tutorials/202303/debugging-rails-applications-with-pry-or-byebug" rel="alternate" type="text/html" title="Debugging Rails applications with Pry or Byebug" /><published>2023-03-05T13:15:00+03:00</published><updated>2023-03-05T13:15:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/tutorials/202303/debugging-rails-applications-with-pry-or-byebug</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/tutorials/202303/debugging-rails-applications-with-pry-or-byebug">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Debugging is an essential part of developing a Ruby on Rails application. 
It involves finding and fixing errors or bugs in the code. There are different 
techniques and tools for debugging Rails applications, but in this tutorial, 
we’ll focus on two popular Ruby debugging tools: Pry and Byebug.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-is-pry&quot;&gt;What is Pry?&lt;/h3&gt;

&lt;p&gt;Pry is a powerful Ruby REPL (Read-Eval-Print Loop) that allows us to interact 
with our code in real-time. We can use Pry to debug our Ruby code, inspect objects, 
and test code snippets. Pry provides several advanced features, including syntax 
highlighting, code introspection, and method discovery.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-is-byebug&quot;&gt;What is Byebug?&lt;/h3&gt;

&lt;p&gt;Byebug is a fast and efficient Ruby debugger that allows us to debug our code 
interactively. Byebug provides a range of powerful features, including step-by-step 
execution, breakpoint management, and stack trace inspection.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Before we can start using Pry or Byebug, we need to install them. To install 
them, add the following lines to your Gemfile:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;pry-rails&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;byebug&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-pry&quot;&gt;Using Pry&lt;/h3&gt;

&lt;p&gt;Once Pry is installed, we can start using it to debug our Rails application. 
To use Pry, we need to add the following line to the code where we want to start debugging:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pry&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This line will pause the execution of the code and open a Pry console, where we 
can inspect variables, call methods, and execute arbitrary Ruby code.&lt;/p&gt;

&lt;p&gt;For example, let’s say we have a controller action that’s not behaving as expected:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
To debug this action with Pry, we can add the &lt;span class=&quot;badge&quot;&gt;binding.pry&lt;/span&gt; 
line after the first line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pry&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
When we load the page that triggers this action, the execution will pause at the 
binding.pry line, and we’ll be dropped into a Pry console where we can inspect 
the &lt;span class=&quot;badge&quot;&gt;@posts&lt;/span&gt; and &lt;span class=&quot;badge&quot;&gt;@categories&lt;/span&gt; 
variables, call methods on them, and execute arbitrary 
Ruby code to help us debug the issue.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;pry-commands&quot;&gt;Pry Commands&lt;/h3&gt;

&lt;p&gt;Pry provides several commands that we can use to interact with our code during debugging. Some of the most commonly used commands are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ls: List the methods available on an object.&lt;/li&gt;
  &lt;li&gt;cd: Change the current context to a different object.&lt;/li&gt;
  &lt;li&gt;whereami: Show the current execution context.&lt;/li&gt;
  &lt;li&gt;exit: Exit the Pry console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-byebug&quot;&gt;Using Byebug&lt;/h3&gt;

&lt;p&gt;Byebug works similarly to Pry, but instead of adding a 
&lt;span class=&quot;badge&quot;&gt;binding.pry&lt;/span&gt; line to the code, we add a byebug line:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;def index
  byebug
  @posts = Post.all
  @categories = Category.all
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
When we load the page that triggers this action, the execution will pause at the 
byebug line, and we’ll be dropped into a Byebug console where we can inspect 
variables, call methods, and execute arbitrary Ruby code to help us debug the issue.&lt;/p&gt;

&lt;p&gt;Byebug also includes a number of commands that can help us navigate the code and 
inspect variables. Some of the most commonly used commands are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;step: Step into the next line of code.&lt;/li&gt;
  &lt;li&gt;next: Step over the next line of code.&lt;/li&gt;
  &lt;li&gt;finish: Continue executing until the current method returns.&lt;/li&gt;
  &lt;li&gt;continue: Continue executing until the next breakpoint or exception.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Additionally, there are a few tips and best practices to keep in mind when 
debugging with Pry or Byebug:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use breakpoints sparingly: Breakpoints can be a powerful tool, but using them 
too frequently can slow down your debugging process. Use them strategically to 
focus on the parts of the code that you suspect are causing the issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Understand the stack trace: When an error occurs, it can be helpful to examine 
the stack trace to see where the error originated. This can help you narrow down 
the source of the problem and guide your debugging efforts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use Pry or Byebug commands: Pry and Byebug both come with a set of useful commands 
that can help you navigate and inspect your code. Familiarize yourself with these 
commands to make debugging faster and more efficient.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep your code organized: Writing clean, organized code can make debugging easier 
by making it easier to follow the flow of your application. Use descriptive variable 
names and break your code up into smaller, more manageable pieces to make it 
easier to debug.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Debugging Rails applications can be a challenging and time-consuming task, but 
with the help of tools like Pry and Byebug, we can make the process easier and 
more efficient. By adding &lt;span class=&quot;badge&quot;&gt;binding.pry&lt;/span&gt; or 
&lt;span class=&quot;badge&quot;&gt;byebug&lt;/span&gt; lines to our code, we can pause the execution 
of the code and inspect variables, call methods, and execute arbitrary Ruby code 
to help us diagnose and fix issues.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">How ChatGPT can Improve Productivity for Web Developers</title><link href="http://0.0.0.0:4000/category/more-topics/machine-learning/articles/202302/how-chatgpt-can-improve-productivity-for-web-developers" rel="alternate" type="text/html" title="How ChatGPT can Improve Productivity for Web Developers" /><published>2023-02-19T09:30:00+03:00</published><updated>2023-02-19T09:30:00+03:00</updated><id>http://0.0.0.0:4000/category/more-topics/machine-learning/articles/202302/how-chatgpt-can-improve-productivity-for-web-developers</id><content type="html" xml:base="http://0.0.0.0:4000/category/more-topics/machine-learning/articles/202302/how-chatgpt-can-improve-productivity-for-web-developers">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;As a web developer, staying productive and on top of your tasks is critical to 
the success of your projects and the satisfaction of your clients. With the ever-evolving 
landscape of web development, it’s essential to be able to work efficiently and 
effectively to keep up with the latest technologies and best practices. This is 
where ChatGPT can help.&lt;/p&gt;

&lt;p&gt;ChatGPT is a large language model developed by OpenAI that uses deep learning 
techniques to understand and generate human-like text. As a result, it can provide 
valuable assistance to web developers in a range of areas, from coding to project management.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;1--code-completion&quot;&gt;1 . Code Completion&lt;/h3&gt;

&lt;p&gt;One of the key benefits of ChatGPT for web developers is its ability to generate 
code snippets. If you’re working on a project and need a specific piece of code, 
you can ask ChatGPT for suggestions and it will provide you with relevant examples. 
Additionally, if you have partially written code, ChatGPT can complete it for you, 
saving you time and effort.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2--documentation&quot;&gt;2 . Documentation&lt;/h3&gt;

&lt;p&gt;Another way ChatGPT can improve your productivity as a web developer is by helping 
you with documentation. Whether you need information on a specific programming 
language, framework, library, or technology, you can ask ChatGPT for details and 
it will provide you with accurate and up-to-date information. This can be especially 
helpful when you’re working on a project and need to quickly reference something.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3--troubleshooting&quot;&gt;3 . Troubleshooting&lt;/h3&gt;

&lt;p&gt;Web development can often be a challenging and complex process, and it’s not uncommon 
to encounter problems and errors along the way. If you’re stuck on a problem, 
you can use ChatGPT to help identify the root cause and provide solutions. 
Simply ask ChatGPT about the error message or problem you’re facing, and it will 
provide you with relevant information and suggestions for fixing the issue.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4--research&quot;&gt;4 . Research&lt;/h3&gt;
&lt;p&gt;As a web developer, it’s important to stay informed about the latest developments 
in your field. ChatGPT can assist with your research by answering questions related 
to the latest technologies, best practices, and other relevant topics. This can 
help you stay up-to-date and improve your overall knowledge, which in turn can 
improve your productivity and the quality of your work.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;5--project-management&quot;&gt;5 . Project Management&lt;/h3&gt;
&lt;p&gt;Finally, ChatGPT can also assist with project management. You can use it to help 
keep track of project tasks and deadlines, generate project reports, and provide 
project progress updates. This can help you stay organized and on top of your 
projects, and ensure that everything is running smoothly.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In conclusion, ChatGPT is a powerful tool that can significantly improve your 
productivity as a web developer. Whether you need help with coding, documentation, 
troubleshooting, research, or project management, ChatGPT can provide you with the 
information and support you need to get the job done. Just remember, while ChatGPT 
is a valuable resource, it’s always important to verify the information it provides 
before using it in your work.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="more-topics" /><summary type="html">Introduction</summary></entry><entry><title type="html">Understanding the MVC (Model-View-Controller) Pattern in Ruby on Rails</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/tutorials/202302/understanding-the-mvc-pattern-in-ruby-on-rails" rel="alternate" type="text/html" title="Understanding the MVC (Model-View-Controller) Pattern in Ruby on Rails" /><published>2023-02-19T09:30:00+03:00</published><updated>2023-02-19T09:30:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/tutorials/202302/understanding-the-mvc-pattern-in-ruby-on-rails</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/tutorials/202302/understanding-the-mvc-pattern-in-ruby-on-rails">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Ruby on Rails is a popular web application framework that follows the MVC 
(Model-View-Controller) architectural pattern. This pattern is used to separate 
an application into three main components: the model, the view, and the controller. 
In this article, we’ll dive into what each of these components does and how they 
work together in a Rails application.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-model&quot;&gt;The Model&lt;/h3&gt;

&lt;p&gt;The model is responsible for representing the data in the application and for 
performing any necessary operations on that data. In Rails, the model is represented 
by an Active Record class. This class is used to interact with the database, 
retrieve data, and perform any necessary operations. For example, let’s consider 
a model for a blog post:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
With this simple model, we can perform operations like creating a new post, 
retrieving all posts, finding a single post by its ID, and more.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-view&quot;&gt;The View&lt;/h3&gt;

&lt;p&gt;The view is responsible for presenting the data to the user. In Rails, views are 
typically written in HTML, with some embedded Ruby code to dynamically display data. 
For example, let’s consider a view for displaying a list of posts:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;posts.each&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;post.title&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;post.body&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
In this view, we use embedded Ruby code to loop through all of the posts and 
display their title and body.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-controller&quot;&gt;The Controller&lt;/h3&gt;

&lt;p&gt;The controller is responsible for receiving user requests, handling any necessary 
data processing, and communicating with the model and the view. In Rails, the 
controller is represented by a class that inherits from &lt;span class=&quot;badge&quot;&gt;ActionController::Base&lt;/span&gt;. 
For example, let’s consider a controller for managing posts:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;class PostsController &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;posts = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Post.all&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Post.find(params[:id])&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
In this controller, we have two actions, index and show. The index action retrieves all of the posts and stores them in an instance variable, while the show action retrieves a single post by its ID and stores it in an instance variable.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;Now that we’ve seen what each component of the MVC pattern does, let’s see how 
they all work together in a Rails application. When a user makes a request to 
the application, the request is routed to the appropriate controller action. 
The controller action then performs any necessary data processing and communicates 
with the model to retrieve the necessary data. Finally, the controller renders 
the appropriate view and returns the response to the user.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In conclusion, the MVC pattern is a powerful way to organize a Rails application and make it easier to understand and maintain. By separating the application into distinct components, you can write clean and maintainable code that is easier to test and modify.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Ruby on Rails 7 Action Cable: A Complete Guide with a Practical Example</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202302/rails-7-action-cable" rel="alternate" type="text/html" title="Ruby on Rails 7 Action Cable: A Complete Guide with a Practical Example" /><published>2023-02-11T17:30:00+03:00</published><updated>2023-02-11T17:30:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202302/rails-7-action-cable</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202302/rails-7-action-cable">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Ruby on Rails Action Cable is a feature of the Ruby on Rails web framework that 
allows you to add real-time communication to your web applications. With Action 
Cable, you can create real-time connections between your application’s client-side 
and server-side, allowing for real-time updates and notifications.&lt;/p&gt;

&lt;p&gt;In this section, we’ll walk through the process of building a complete real-time 
chat application using Ruby on Rails Action Cable. By the end of this section, 
you’ll have a working chat application that allows users to send and receive 
messages in real-time.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-1-create-a-new-ruby-on-rails-application&quot;&gt;Step 1: Create a new Ruby on Rails application&lt;/h3&gt;

&lt;p&gt;The first step is to create a new Ruby on Rails application. To do this, open a 
terminal and run the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails new realtime-chat&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create a new Ruby on Rails application in a directory named realtime-chat.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-2-generate-a-chat-room-model-and-controller&quot;&gt;Step 2: Generate a Chat Room model and controller&lt;/h3&gt;

&lt;p&gt;Next, we’ll generate a Chat Room model and controller. A Chat Room is where users 
can send and receive messages. To generate the Chat Room model and controller, 
run the following commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails generate model ChatRoom name:string
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails generate controller ChatRooms&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-3-add-routes-for-the-chat-rooms&quot;&gt;Step 3: Add routes for the Chat Rooms&lt;/h3&gt;

&lt;p&gt;Now, we’ll add routes for the Chat Rooms. Open the config/routes.rb file and add 
the following line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes.rb&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:chat_rooms&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;chat_rooms#index&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will create RESTful routes for the Chat Rooms and set the root path of the 
application to the index action of the Chat Rooms controller.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-4-create-the-chat-room-view&quot;&gt;Step 4: Create the Chat Room view&lt;/h3&gt;

&lt;p&gt;Next, we’ll create the view for the Chat Room. To do this, create a file in 
&lt;span class=&quot;badge&quot;&gt;app/views/chat_rooms&lt;/span&gt; named 
&lt;span class=&quot;badge&quot;&gt;show.html.erb&lt;/span&gt; with the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/chat_rooms/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;chat_room.name&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;messages&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message-input&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Send&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-5-generate-a-channel-for-the-chat-room&quot;&gt;Step 5: Generate a channel for the Chat Room&lt;/h3&gt;

&lt;p&gt;Now, we’ll generate a channel for the Chat Room. To do this, run the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails generate channel ChatRoom&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will generate a channel class in the file &lt;span class=&quot;badge&quot;&gt;app/channels/chat_room_channel.rb&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-6-add-broadcast-method-to-the-channel&quot;&gt;Step 6: Add broadcast method to the channel&lt;/h3&gt;

&lt;p&gt;Next, we’ll add a broadcast method to the channel. This method will broadcast 
messages to the Chat Room channel. Open the &lt;span class=&quot;badge&quot;&gt;app/channels/chat_room_channel.rb&lt;/span&gt; 
file and add the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/channels/chat_room_channel.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChatRoomChannel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationCable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Channel&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribed&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stream_from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;chat_room_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unsubscribed&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Any cleanup needed when channel is unsubscribed&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActionCable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;broadcast&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;chat_room_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;message&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-7-create-a-javascript-file-for-the-chat-room&quot;&gt;Step 7: Create a JavaScript file for the Chat Room&lt;/h3&gt;

&lt;p&gt;Next, we’ll create a JavaScript file for the Chat Room that will handle sending 
and receiving messages using Action Cable. Create a file named 
&lt;span class=&quot;badge&quot;&gt;chat_rooms.js&lt;/span&gt; in &lt;span class=&quot;badge&quot;&gt;app/assets/javascripts&lt;/span&gt; with the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;javascripts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chat_rooms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;turbolinks:load&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chat_room&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ChatRoomChannel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[data-chat-room-id]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chat-room-id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;disconnected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;received&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#messages&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;send_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chat_room_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;chat_room_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chat_room_id&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#new_message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#message-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chat_room&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[data-chat-room-id]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chat-room-id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#message-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-8-add-a-form-to-the-chat-room-view&quot;&gt;Step 8: Add a form to the Chat Room view&lt;/h3&gt;

&lt;p&gt;Next, we’ll add a form to the Chat Room view that will allow users to send messages. 
Open the &lt;span class=&quot;badge&quot;&gt;app/views/chat_rooms/show.html.erb&lt;/span&gt; file and 
modify the form as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- app/views/chat_rooms/show.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;chat_room.name&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;messages&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;new_message&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message-input&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Send&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-9-add-the-chat_room_id-to-the-chat-room-view&quot;&gt;Step 9: Add the chat_room_id to the Chat Room view&lt;/h3&gt;

&lt;p&gt;Finally, we’ll add the chat_room_id to the Chat Room view so that it can be used 
in the JavaScript file. Open the &lt;span class=&quot;badge&quot;&gt;app/views/chat_rooms/show.html.erb&lt;/span&gt; 
file and add the following line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chat_rooms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= content_tag :div, nil, data: { chat_room_id: @chat_room.id } %&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;step-10-start-the-ruby-on-rails-server&quot;&gt;Step 10: Start the Ruby on Rails server&lt;/h3&gt;

&lt;p&gt;Now, we’re ready to start the Ruby on Rails server and see our real-time chat 
application in action. To start the server, run the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails server&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Open a web browser and navigate to http://localhost:3000 to see the chat application. 
You can open multiple browser tabs and send messages between them to see the real-time updates in action.&lt;/p&gt;

&lt;p&gt;In this guide, we’ve walked through the process of building a complete real-time 
chat application using Ruby on Rails Action Cable. By leveraging the power of 
Action Cable, you can easily add real-time communication to your Ruby on Rails web applications.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Message Queue (MQ)</title><link href="http://0.0.0.0:4000/category/more-topics/cloud-services/microservice-architecture/202302/message-queues" rel="alternate" type="text/html" title="Message Queue (MQ)" /><published>2023-02-01T06:00:00+03:00</published><updated>2023-02-01T06:00:00+03:00</updated><id>http://0.0.0.0:4000/category/more-topics/cloud-services/microservice-architecture/202302/message-queues</id><content type="html" xml:base="http://0.0.0.0:4000/category/more-topics/cloud-services/microservice-architecture/202302/message-queues">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;In the world of modern software development, where applications are designed to handle massive amounts of data and serve millions of users, message queues have become an indispensable tool. A message queue is a system that facilitates the exchange of messages between applications and services in a reliable, scalable, and asynchronous manner. This section will explore what message queues are, how they work, and why they are critical to the success of many software projects.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;definition&quot;&gt;Definition&lt;/h3&gt;

&lt;p&gt;A message queue is a form of asynchronous service-to-service communication that allows a service to continue handling tasks assigned to it without needing to wait for the other services to respond. Instead, each service can complete its tasks and push a message/result into the queue for execution, allowing the service to continue with its next task.&lt;/p&gt;

&lt;p&gt;It is a software component that acts as a buffer between the producers and consumers of messages. Producers send messages to the queue, and consumers retrieve messages from the queue. The queue serves as a mediator, ensuring that messages are delivered in the order they were sent and ensuring that messages are not lost in the process. The messages are typically organized into queues or topics, and the consumers subscribe to specific queues or topics to receive messages.&lt;/p&gt;

&lt;p&gt;A message queue centralizes the connections between services. Messages are stored on the queue until they are processed and deleted. Each message is processed only once, by a single consumer.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;how-do-message-queues-work&quot;&gt;How do message queues work?&lt;/h3&gt;

&lt;p&gt;Message queues operate on a publish/subscribe model, where the producer publishes a message to the queue, and the consumers subscribe to the queue and receive messages from it. When a producer publishes a message to the queue, the message is added to the end of the queue, and when a consumer retrieves a message, it is removed from the front of the queue. This ensures that messages are delivered in the order they were sent, and no messages are lost in the process.&lt;/p&gt;

&lt;p&gt;The key to the reliability and scalability of message queues is the asynchronous nature of their operation. The producers and consumers do not have to be running at the same time, and they do not have to communicate directly with each other. This means that the producer can send messages to the queue at any time, and the consumer can retrieve messages from the queue at any time, regardless of whether the producer or consumer is online or offline.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img class=&quot;zoom-on-hover mobile-image&quot; srcset=&quot;   /assets/img/posts/message_queue.png 1.3x &quot; alt=&quot;missing image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;why-are-message-queues-important&quot;&gt;Why are message queues important?&lt;/h3&gt;

&lt;p&gt;Message queues are an essential component of many modern software systems because they provide a reliable and scalable way to exchange data between applications and services. They allow applications to operate independently, reducing the risk of downtime and increasing overall system reliability. They also allow applications to scale horizontally, by adding more consumers to handle increased loads, and vertically, by adding more resources to the message queue to handle increased message volume.&lt;/p&gt;

&lt;p&gt;In addition, message queues provide a flexible and extensible architecture for integrating different applications and services. By using message queues, applications can exchange messages in a loosely coupled manner, reducing the risk of tightly coupled dependencies and allowing for greater flexibility in changing or updating the applications.&lt;/p&gt;

&lt;p&gt;Finally, message queues are an essential component of many microservices-based software systems. Microservices are a software architecture pattern that involves breaking down a monolithic application into smaller, independently deployable services. Message queues provide a scalable and reliable way for these services to communicate with each other, allowing the overall system to scale and evolve as needed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;MQ is used in serverless and microservices architectures.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In today’s fast-paced software development world, message queues have become a critical component of many software systems. They provide a reliable and scalable way to exchange data between applications and services, allowing systems to operate independently, scale, and evolve as needed. With their flexible and extensible architecture, message queues provide a solid foundation for building and integrating modern software systems. Whether you are building a new software system or integrating existing systems, message queues are an essential tool for ensuring the success of your project.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="more-topics" /><summary type="html">Introduction</summary></entry><entry><title type="html">Nginx Commands Cheat Sheet</title><link href="http://0.0.0.0:4000/category/more-topics/cloud-services/servers/202301/nginx-commands-cheat-sheet" rel="alternate" type="text/html" title="Nginx Commands Cheat Sheet" /><published>2023-01-26T15:45:00+03:00</published><updated>2023-01-26T15:45:00+03:00</updated><id>http://0.0.0.0:4000/category/more-topics/cloud-services/servers/202301/nginx-commands-cheat-sheet</id><content type="html" xml:base="http://0.0.0.0:4000/category/more-topics/cloud-services/servers/202301/nginx-commands-cheat-sheet">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;The following are usefull commands for nginx on linux.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;part-a-commands&quot;&gt;Part A: Commands&lt;/h3&gt;

&lt;p&gt;1 . Check nginx version&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
2 . Start nginx server&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx start&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
3 . Stop nginx server&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx stop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
4 . Restart nginx server&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
5 . Reload nginx server&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx reload&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
6 . Check nginx status&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx status&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
7 . Find syntax errors in the Nginx configuration file after making changes&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;or
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /path/to/the/file&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;part-b-file-locations&quot;&gt;Part B: File locations&lt;/h3&gt;

&lt;p&gt;1 . Log Files&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;badge&quot;&gt;/var/log/nginx/access.log&lt;/span&gt; &lt;br /&gt;
&lt;span class=&quot;badge&quot;&gt;/var/log/nginx/error.log&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
2 . Global config file&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;badge&quot;&gt;/etc/nginx/conf.d/mod-http-passenger.conf&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
3 . Default server file
&lt;span class=&quot;badge&quot;&gt;/etc/nginx/sites-enabled/default&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;That’s it! Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="more-topics" /><summary type="html">Introduction The following are usefull commands for nginx on linux.</summary></entry><entry><title type="html">Deploying Rails App to AWS EC2 Ubuntu Server With Capistrano</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/tutorials/202301/deploying-rails-app-to-aws-with-capistrano" rel="alternate" type="text/html" title="Deploying Rails App to AWS EC2 Ubuntu Server With Capistrano" /><published>2023-01-26T13:25:00+03:00</published><updated>2023-01-26T13:25:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/tutorials/202301/deploying-rails-app-to-aws-with-capistrano</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/tutorials/202301/deploying-rails-app-to-aws-with-capistrano">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Deploying application updates takes multiple steps. Performing all these steps 
every time you want to deploy application updates is time-consuming and error-prone.
This section will guide you on how to automate the deployment of application updates 
through Capistrano.&lt;/p&gt;

&lt;p&gt;Capistrano is a popular task automation tool among Ruby developers. Once Capistrano is set up,
deploying further application updates only takes a single command.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;part-a&quot;&gt;Part A&lt;/h3&gt;
&lt;p&gt;ssh into your server and:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/category/programming/ruby/tutorials/202301/installing-ruby-on-ubuntu-using-rbenv&quot; target=&quot;_blank&quot;&gt;Install Ruby&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/category/databases/mysql/tutorials/202301/installing-mysql-on-ubuntu&quot; target=&quot;_blank&quot;&gt;Install MySQL&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;/category/more-topics/operating-systems/ubuntu/202301/installing-nginx-and-passenger-on-ubuntu&quot; target=&quot;_blank&quot;&gt;Install nginx and passenger&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;part-b&quot;&gt;Part B&lt;/h3&gt;

&lt;h3 id=&quot;1--initializing-capistrano&quot;&gt;1 . Initializing Capistrano&lt;/h3&gt;
&lt;p&gt;The first thing you need to do is to install Capistrano into your rails project.&lt;/p&gt;

&lt;p&gt;i). Open the Gemfile and add:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:production&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;capistrano&apos;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;capistrano-bundler&apos;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;capistrano-passenger&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&amp;gt;= 0.1.1&apos;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;capistrano-rails&apos;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Because we’re using rbenv on our EC2 Server&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;capistrano-rbenv&apos;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
  ii) Install the gem bundle and initialize Capistrano:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;cap &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2--editing-capfile&quot;&gt;2 . Editing Capfile&lt;/h3&gt;

&lt;p&gt;Capfile is the Capistrano entry point. It defines what recipes to load. You must edit it to load the
recipes you need.&lt;/p&gt;

&lt;p&gt;We will want Capistrano to automatically run bundle install, and we will want Capistrano to
automatically tell Passenger to restart our app. These are taken care of by the capistrano-bundler and
capistrano-passenger recipes. So make sure that the following lines are uncommented:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Capfile&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#Because the server uses rbenv&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;capistrano/rbenv&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;capistrano/bundler&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# require &quot;capistrano/rails/assets&quot; # hashed out because of server&apos;s assets precompile issues&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;capistrano/rails/migrations&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;capistrano/passenger&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3--editing-configdeployrb&quot;&gt;3 . Editing config/deploy.rb&lt;/h3&gt;

&lt;p&gt;The next step is to edit config/deploy.rb. This file contains configuration values that control how the
loaded recipes should do their jobs. It also defines additional commands to be executed on servers. You
must edit it according to your situation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/deploy.rb&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# config valid for current version and patch releases of Capistrano&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Remove the lock statement since already serves as a mechanism to lock down gem&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# lock &quot;~&amp;gt; 3.11.0&quot;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Set repo_url to your Git repository&apos;s URL&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;myapp&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:repo_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git@github.com:yourgitusername/myapp.git&quot;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Default deploy_to directory is /var/www/my_app_name&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/home/username/projects/myapp&quot;&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# set linked_files and linked_dirs&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:linked_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:linked_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;config/database.yml&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;config/secrets.yml&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;.env&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:linked_dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:linked_dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;log&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;tmp/pids&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;tmp/cache&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;tmp/sockets&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;vendor/bundle&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;public/system&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;public/uploads&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:deploy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:clear_cache&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;in: :groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;limit: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;wait: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Here we can do anything such as:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# within release_path do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#   execute :rake, &apos;cache:clear&apos;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4--editing-configdeployproductionrb&quot;&gt;4 . Editing config/deploy/production.rb&lt;/h3&gt;

&lt;p&gt;The next step is to edit config/deploy/production.rb. This file defines the servers that Capistrano should
deploy to, in the form of SSH login information.&lt;/p&gt;

&lt;p&gt;Our server is on Amazon EC2, so be sure to uncomment the set &lt;span class=&quot;badge&quot;&gt;:ssh_options&lt;/span&gt; call and point the
keys option to your Amazon EC2 key file. Also set the auth_methods option to %w(publickey
password).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/deploy/production.rb&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# role-based syntax&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ==================&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Single server&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Replace with your server&apos;s IP and user&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w{username@54.82.83.53}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w{username@54.82.83.53}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;sx&quot;&gt;%w{username@54.82.83.53}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Custom SSH Options&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ==================&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# --------------&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssh_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;keys: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%w(/home/username/somepath/your_key_pair.pem)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;forward_agent: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;auth_methods: &lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%w(publickey password)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;5--setting-up-a-basic-directory-structure&quot;&gt;5 . Setting up a basic directory structure&lt;/h3&gt;
&lt;p&gt;Run the following commands on the server to setup a basic directory structure that Capistrano can
work with.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/use&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;myappuser: &lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/home/use&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/use&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;6--create-initial-configuration-files&quot;&gt;6 . Create initial configuration files&lt;/h3&gt;

&lt;p&gt;The app expects a &lt;span class=&quot;badge&quot;&gt;config/database.yml&lt;/span&gt; and a 
&lt;span class=&quot;badge&quot;&gt;config/secrets.yml&lt;/span&gt; files. The contents of these 
configuration files are only known to the server and persist across
application releases. The shared directory is the perfect place to place them. 
And as configured before in &lt;span class=&quot;badge&quot;&gt;config/deploy.rb&lt;/span&gt;, Capistrano will 
automatically create symlinks within the release directory to those files.&lt;/p&gt;

&lt;p&gt;i) On the server, create the &lt;span class=&quot;badge&quot;&gt;shared/config&lt;/span&gt; directory and add &lt;span class=&quot;badge&quot;&gt;database.yml&lt;/span&gt; and
&lt;span class=&quot;badge&quot;&gt;secrets.yml&lt;/span&gt; files inside:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /home/username/projects/myapp/shared/config
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo touch&lt;/span&gt; /home/username/projects/myapp/shared/config/database.yml &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo touch&lt;/span&gt; /home/username/projects/myapp/shared/config/secrets.yml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
  ii). Then fix and tighten permissions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt;sudo chown -R username: home/username/projects/myapp/shared/config
chmod 600 home/username/projects/myapp/shared/config/database.yml
chmod 600 home/username/projects/myapp/shared/config/secrets.yml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
  iii). edit database.yml file&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt; 
  
&lt;span class=&quot;na&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;utf8&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;reconnect&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myapp_database&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db_username&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db_password&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
  iv). On your development machine, generate the secret key and add it to 
       &lt;span class=&quot;badge&quot;&gt;config/initializers/secret_token.rb&lt;/span&gt; file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;go&quot;&gt; 
  
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails secret&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; 
&lt;span class=&quot;c1&quot;&gt;# config/initializers/secret_token.rb&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Be sure to restart your server when you modify this file.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Your secret key is used for verifying the integrity of signed cookies.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# If you change this key, all old signed cookies will become invalid!&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Make sure the secret is at least 30 characters and all random,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# no regular words or you&apos;ll be exposed to dictionary attacks.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# You can use `rake secret` to generate a secure secret key.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Make sure your secret_key_base is kept private&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# if you&apos;re sharing your code publicly.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;secret_key_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;90a82db7702c2d0af8a5ad715962116b8fffaf7bb833162a32ef71d345845e424de9e0ecda1dbd81191201ecbtfc09c7f6a747eb17d7cc111490914df62b2c09&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
  v). Add the secret key in the &lt;span class=&quot;badge&quot;&gt;secrets.yml&lt;/span&gt; file on the server&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;  
 
&lt;span class=&quot;s&quot;&gt;90a82db7702c2d0af8a5ad715962116b8fffaf7bb833162a32ef71d345845e424de9e0ecda1dbd81191201ecbtfc09c7f6a747eb17d7cc111490914df62b2c09&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;7--deploying-a-new-release&quot;&gt;7 . Deploying a new release&lt;/h3&gt;
&lt;p&gt;You are now ready to deploy a new release using Capistrano!
On your local computer, make a random change in your application, then commit and push your changes.
Next, run Capistrano to start the deployment:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;cap production deploy&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You have now automated deployments using Capistrano!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry></feed>