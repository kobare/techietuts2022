<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2023-05-20T13:27:39+03:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Techietuts</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Test-Driven Development (TDD): Building Quality Software through Automated Testing</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202305/tdd-building-quality-software-through-automated-testing" rel="alternate" type="text/html" title="Test-Driven Development (TDD): Building Quality Software through Automated Testing" /><published>2023-05-20T13:00:00+03:00</published><updated>2023-05-20T13:00:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202305/tdd-building-quality-software-through-automated-testing</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202305/tdd-building-quality-software-through-automated-testing">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Test-Driven Development (TDD) is a software development approach that emphasizes 
writing tests before implementing the actual code. By following this iterative 
and disciplined process, developers can create high-quality software with 
improved design, maintainability, and reliability. This article explores the 
principles, benefits, and best practices of Test-Driven Development.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-principles-of-tdd&quot;&gt;The Principles of TDD:&lt;/h3&gt;

&lt;p&gt;TDD follows a simple yet powerful cycle known as the “Red-Green-Refactor” cycle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Red: Write a failing test case that captures the desired behavior or functionality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Green: Implement the minimum code necessary to make the test pass. This code 
may not be perfect or optimized yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Refactor: Enhance the code, ensuring it is clean, efficient, and adheres to 
best practices. Refactoring does not introduce new functionality but improves 
the existing codebase.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This cycle is repeated for each new feature or behavior, gradually building a 
comprehensive suite of tests and a robust codebase.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;benefits-of-tdd&quot;&gt;Benefits of TDD:&lt;/h3&gt;

&lt;p&gt;Implementing TDD in your software development process provides numerous advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Reliable and Accurate Software: TDD encourages developers to thoroughly test 
their code, ensuring that it meets the specified requirements. This results in 
more accurate and reliable software that behaves as expected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improved Code Quality: Writing tests before implementation forces developers 
to think critically about their design choices and produce modular, loosely 
coupled code. As a result, the codebase becomes more maintainable, scalable, 
and easier to understand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Faster Debugging and Troubleshooting: By catching issues early in the development 
process, TDD minimizes the time spent debugging and troubleshooting. Failing tests 
provide immediate feedback, guiding developers towards the source of the problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Agile Development: TDD promotes incremental development and iterative improvement, 
allowing for faster feature implementation and rapid adaptation to changing requirements.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Enhanced Collaboration: TDD encourages collaboration between developers and 
stakeholders by providing a shared understanding of the software’s expected behavior. 
This leads to improved communication, reduced misunderstandings, and better 
alignment with customer expectations.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;best-practices-for-tdd&quot;&gt;Best Practices for TDD:&lt;/h3&gt;

&lt;p&gt;To make the most of TDD, consider the following best practices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Start with Small, Atomic Tests: Begin by writing small, focused tests that 
verify a single behavior or feature. This ensures clarity and simplicity in both 
the tests and the implementation code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Test All Edge Cases: Cover different scenarios, including boundary cases and 
potential error conditions, to ensure comprehensive test coverage and robust software behavior.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Refactor Regularly: As the codebase grows, refactor to improve its structure, 
eliminate duplication, and enhance maintainability. Refactoring should not modify 
the behavior of the code but improve its internal quality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep Tests Fast and Independent: Test execution speed is crucial for developer 
productivity. Maintain fast-running tests that are independent of each other to 
isolate failures and improve test performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Embrace Automation: Utilize testing frameworks and tools that facilitate 
automated test execution, such as Ruby’s built-in Test::Unit or popular 
alternatives like RSpec or MiniTest. Automation saves time and enables frequent 
and reliable testing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;overcoming-challenges-and-considerations&quot;&gt;Overcoming Challenges and Considerations:&lt;/h3&gt;

&lt;p&gt;Implementing TDD may present certain challenges, such as a learning curve for 
developers and potential time investment in writing tests. However, the long-term 
benefits far outweigh these initial hurdles. It’s essential to foster a culture 
that values testing and provides adequate support, training, and resources to 
adopt TDD successfully.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Test-Driven Development is a powerful approach to software development that 
fosters high-quality, reliable, and maintainable code. By writing tests first, 
developers ensure accurate implementation, improve code design, and reduce bugs 
and defects. TDD promotes collaboration, agility, and faster development cycles, 
leading to improved software products and customer satisfaction. Embrace TDD as 
a core practice in your development process and experience the long-term benefits 
it brings to your software projects.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Efficient Rails Testing: Ensuring Code Quality and Reliability</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202305/efficient-rails-testing-ensuring-code-quality-and-reliability" rel="alternate" type="text/html" title="Efficient Rails Testing: Ensuring Code Quality and Reliability" /><published>2023-05-20T12:00:00+03:00</published><updated>2023-05-20T12:00:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202305/efficient-rails-testing-ensuring-code-quality-and-reliability</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202305/efficient-rails-testing-ensuring-code-quality-and-reliability">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Testing is crucial for building robust software applications in Ruby on Rails. 
Rails provides a comprehensive testing framework that simplifies the process, 
allowing developers to verify code correctness, catch bugs early, and ensure 
application stability. This section explores essential concepts and best 
practices for efficient Rails testing.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;test-types-in-rails&quot;&gt;Test Types in Rails:&lt;/h3&gt;

&lt;p&gt;Rails testing framework includes various types of tests, each serving a specific purpose:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Unit Tests: Focus on individual components like models, ensuring their isolated functionality.&lt;/li&gt;
  &lt;li&gt;Functional Tests: Verify controller behavior, handling HTTP requests and responses.&lt;/li&gt;
  &lt;li&gt;Integration Tests: Validate component interactions and how different parts work together.&lt;/li&gt;
  &lt;li&gt;System Tests: Mimic real user interactions, including browser automation, to test end-to-end functionality.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;test-fixtures-and-factories&quot;&gt;Test Fixtures and Factories:&lt;/h3&gt;

&lt;p&gt;Choose between fixtures and factories for testing data:&lt;/p&gt;

&lt;p&gt;Fixtures: Provide pre-defined data.
Factories: Generate dynamic test data using libraries like FactoryBot, offering 
more flexibility and control.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;testing-tools&quot;&gt;Testing Tools:&lt;/h3&gt;

&lt;p&gt;Rails incorporates various testing tools and frameworks:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Test::Unit: Default testing framework with a simple and intuitive syntax.&lt;/li&gt;
  &lt;li&gt;RSpec: Popular alternative to Test::Unit, providing expressive and readable syntax.&lt;/li&gt;
  &lt;li&gt;Capybara: Powerful library for integration and system testing, including browser automation.&lt;/li&gt;
  &lt;li&gt;Shoulda Matchers: Simplify writing common test assertions, reducing boilerplate code.&lt;/li&gt;
  &lt;li&gt;VCR: Record and replay HTTP interactions for offline testing and reducing dependencies.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;test-driven-development-tdd&quot;&gt;Test-Driven Development (TDD):&lt;/h3&gt;

&lt;p&gt;TDD emphasizes writing tests before implementing code, ensuring quality and 
providing quick feedback. Follow the “Red-Green-Refactor” cycle: write failing 
tests, implement code to pass tests, and refactor for improvement.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;continuous-integration-ci&quot;&gt;Continuous Integration (CI):&lt;/h3&gt;

&lt;p&gt;Integrate automated tests with CI systems like Jenkins, Travis CI, or CircleCI 
to streamline the process. CI runs tests automatically on code changes, providing 
timely feedback and catching issues early.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;testing-best-practices&quot;&gt;Testing Best Practices:&lt;/h3&gt;

&lt;p&gt;Maximize Rails testing effectiveness with these practices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keep tests focused and concise, following the “Single Responsibility Principle.”&lt;/li&gt;
  &lt;li&gt;Use descriptive test names to convey intent and purpose clearly.&lt;/li&gt;
  &lt;li&gt;Utilize test coverage tools like SimpleCov for comprehensive test coverage.&lt;/li&gt;
  &lt;li&gt;Practice TDD to guide development and enforce code quality.&lt;/li&gt;
  &lt;li&gt;Use fixtures or factories to generate test data and isolate dependencies.&lt;/li&gt;
  &lt;li&gt;Regularly update tests to align with application codebase changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Testing is essential in Rails development, ensuring stability, maintainability, 
and overall quality. By understanding test types, utilizing appropriate tools, 
practicing TDD, and embracing CI, developers can build reliable and robust Rails 
applications. Following testing best practices instills confidence in code and 
delivers high-quality software to users.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Building a Progressive Web App (PWA) with Rails: Offline Access and Push Notifications</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202305/building-a-progressive-web-app-with-rails-offline-access-and-push-notifications" rel="alternate" type="text/html" title="Building a Progressive Web App (PWA) with Rails: Offline Access and Push Notifications" /><published>2023-05-13T13:00:00+03:00</published><updated>2023-05-13T13:00:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202305/building-a-progressive-web-app-with-rails-offline-access-and-push-notifications</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202305/building-a-progressive-web-app-with-rails-offline-access-and-push-notifications">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;In recent years, Progressive Web Apps (PWAs) have gained significant popularity 
among web developers and users alike. PWAs provide a seamless and engaging user 
experience, combining the best features of web and mobile applications. They can 
be accessed through web browsers and offer capabilities like offline access, push 
notifications, and device integration. In this tutorial, we will explore how to 
build a Progressive Web App with Rails, focusing on implementing PWA features 
such as offline access and push notifications.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;benefits-of-progressive-web-apps-pwas&quot;&gt;Benefits of Progressive Web Apps (PWAs)&lt;/h3&gt;

&lt;p&gt;Before diving into the implementation details, let’s understand the benefits of 
building a Progressive Web App:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;1--cross-platform-compatibility&quot;&gt;1 . Cross-platform compatibility&lt;/h4&gt;
&lt;p&gt;PWAs are built with web technologies such as HTML, CSS, and JavaScript, making 
them compatible across various platforms and devices. They work on both desktop 
and mobile devices, eliminating the need to develop separate applications for 
different platforms.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;2--enhanced-user-experience&quot;&gt;2 . Enhanced user experience&lt;/h4&gt;
&lt;p&gt;PWAs provide a native-like experience to users, with smooth animations, offline 
access, and push notifications. They load quickly and respond instantly, even on 
slower network connections, resulting in higher user engagement and satisfaction.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;3--offline-access&quot;&gt;3 . Offline access&lt;/h4&gt;
&lt;p&gt;One of the standout features of PWAs is the ability to work offline. By utilizing 
a combination of service workers and caching, PWAs can store and display content 
even when the device is not connected to the internet. This ensures that users 
can access and interact with the app regardless of their network status.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;4--push-notifications&quot;&gt;4 . Push notifications&lt;/h4&gt;
&lt;p&gt;PWAs can send push notifications to users, allowing them to stay updated with new 
content, alerts, or important information even when the app is not open. Push 
notifications enable re-engagement and can significantly improve user retention 
and conversion rates.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;5--app-like-behavior&quot;&gt;5 . App-like behavior&lt;/h4&gt;
&lt;p&gt;PWAs can be installed on the user’s home screen, just like native mobile 
applications, without the need to go through an app store. This provides easy 
access and increases the visibility of your app to users. Additionally, PWAs can 
access device features like cameras, geolocation, and sensors, enhancing their 
functionality and versatility.&lt;/p&gt;

&lt;p&gt;Now that we understand the benefits of PWAs, let’s move on to implementing PWA 
features in a Rails application.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;implementing-offline-access&quot;&gt;Implementing Offline Access&lt;/h3&gt;

&lt;p&gt;Offline access is a crucial feature of PWAs, as it allows users to access content 
even when they are not connected to the internet. To implement offline access in 
a Rails application, we’ll utilize service workers and caching.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-1-setting-up-a-service-worker&quot;&gt;Step 1: Setting up a Service Worker&lt;/h4&gt;

&lt;p&gt;i). Create a new JavaScript file called service-worker.js in your Rails app’s 
public directory.&lt;/p&gt;

&lt;p&gt;ii). Add the following code to the service-worker.js file to register 
the service worker:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;your-app-cache&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/assets/css/styles.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/assets/js/app.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Add other assets you want to cache&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-2-linking-the-service-worker-to-your-rails-application&quot;&gt;Step 2: Linking the Service Worker to Your Rails Application&lt;/h4&gt;

&lt;p&gt;i). In your Rails application layout file (e.g., application.html.erb), add the 
following code inside the &amp;lt;head&amp;gt; tag:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/service-worker.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Service Worker registered with scope:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;registration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Service Worker registration failed:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-3-configuring-caching&quot;&gt;Step 3: Configuring Caching&lt;/h4&gt;

&lt;p&gt;i). Open your Rails application’s config/initializers/assets.rb file.
ii). Add the following code to configure caching for your assets:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;precompile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w( service-worker.js )&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;register_transformer&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;text/cache-manifest&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;application/x-cache-manifest&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sprockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DirectiveProcessor&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-4-testing-offline-access&quot;&gt;Step 4: Testing Offline Access&lt;/h4&gt;

&lt;p&gt;i). Start your Rails server by running rails server in your terminal.
ii). Open your application in a web browser.
iii). Use the browser’s developer tools to simulate offline mode.
iv). Reload the page and verify that the cached assets are still being served.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Congratulations! You have successfully implemented offline access in your Rails 
application using service workers and caching.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;implementing-push-notifications&quot;&gt;Implementing Push Notifications&lt;/h3&gt;

&lt;p&gt;Push notifications are a powerful way to engage and re-engage users with your PWA. 
To implement push notifications in a Rails application, we’ll utilize the Web 
Push API and a service worker.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-1-setting-up-web-push&quot;&gt;Step 1: Setting up Web Push&lt;/h4&gt;

&lt;p&gt;i). Generate VAPID keys by running the following command in your terminal:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;npx web-push generate-vapid-keys&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
ii). Take note of the generated public and private keys.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-2-configuring-the-rails-application&quot;&gt;Step 2: Configuring the Rails Application&lt;/h4&gt;

&lt;p&gt;i). Install the webpush gem by adding it to your Gemfile and running bundle install.&lt;/p&gt;

&lt;p&gt;ii). Create a new file called push_notifications_controller.rb and add the 
following code:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PushNotificationsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;notification: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;title: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;New Notification&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;This is a push notification from your PWA!&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;icon: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;/assets/notification-icon.png&apos;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Webpush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;payload_send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;endpoint: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;p256dh: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:p256dh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;auth: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;vapid: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;subject: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;mailto:your@email.com&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;public_key: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;YOUR_VAPID_PUBLIC_KEY&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;private_key: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;YOUR_VAPID_PRIVATE_KEY&apos;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
Replace &lt;span class=&quot;badge&quot;&gt;YOUR_VAPID_PUBLIC_KEY&lt;/span&gt; and 
&lt;span class=&quot;badge&quot;&gt;YOUR_VAPID_PRIVATE_KEY&lt;/span&gt; with the respective keys 
generated in Step 1.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-3-adding-push-notification-ui&quot;&gt;Step 3: Adding Push Notification UI&lt;/h4&gt;

&lt;p&gt;i). Create a view file called subscribe.html.erb and add the following code:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Subscribe to Push Notifications&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;subscribe-button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Subscribe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;DOMContentLoaded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscribeButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;subscribe-button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;subscribeButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;PushManager&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorkerRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;serviceWorkerRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pushManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;userVisibleOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;applicationServerKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;YOUR_VAPID_PUBLIC_KEY&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/push_notifications&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Content-Type&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;X-CSRF-Token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;%= form_authenticity_token %&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Error subscribing to push notifications:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-4-routing-and-csrf-protection&quot;&gt;Step 4: Routing and CSRF Protection&lt;/h4&gt;

&lt;p&gt;i). Open your config/routes.rb file and add the following route:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/push_notifications&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;push_notifications#create&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
ii). Make sure you have the protect_from_forgery method enabled in your 
ApplicationController to provide CSRF protection.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;step-5-testing-push-notifications&quot;&gt;Step 5: Testing Push Notifications&lt;/h4&gt;

&lt;p&gt;i). Start your Rails server by running rails server in your terminal.
ii). Open your application in a web browser.
iii). Navigate to the subscribe page (e.g., http://localhost:3000/subscribe).
iv). Click the “Subscribe” button to subscribe to push notifications.
v). Verify that the subscription details are being sent to the server and a push 
notification is triggered.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Congratulations! You have successfully implemented push notifications in your 
Rails application.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this tutorial, we explored the benefits of building a Progressive Web App with 
Rails and learned how to implement PWA features such as offline access and push 
notifications. By leveraging service workers, caching, and the Web Push API, we 
were able to provide an enhanced user experience with offline access and real-time 
push notifications. PWAs offer a powerful combination of web and mobile app 
capabilities, providing cross-platform compatibility and engaging user experiences. 
With the knowledge gained from this tutorial, you are now equipped to build your 
own Progressive Web App with Rails and take advantage of the benefits it offers. Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Best Practices for Git Workflows and Branch Management</title><link href="http://0.0.0.0:4000/category/vcs/github/concepts/202305/best-practices-for-git-workflows-and-branch-management.markdown" rel="alternate" type="text/html" title="Best Practices for Git Workflows and Branch Management" /><published>2023-05-04T16:30:00+03:00</published><updated>2023-05-04T16:30:00+03:00</updated><id>http://0.0.0.0:4000/category/vcs/github/concepts/202305/best-practices-for-git-workflows-and-branch-management.markdown</id><content type="html" xml:base="http://0.0.0.0:4000/category/vcs/github/concepts/202305/best-practices-for-git-workflows-and-branch-management.markdown">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Git is a popular version control system used by Rails developers to manage 
changes, collaborate with others, and maintain code quality. However, using Git 
effectively requires more than just basic knowledge of its commands. In this 
article, we’ll explore some best practices for Git workflows and branch 
management in Rails apps, with practical examples to illustrate each point.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;use-a-branching-model&quot;&gt;Use a Branching Model&lt;/h3&gt;

&lt;p&gt;A branching model is a strategy for organizing your Git branches based on the 
workflow of your team. There are several popular branching models, but one that 
works well for Rails apps is the Gitflow model.&lt;/p&gt;

&lt;p&gt;Gitflow separates branches into two main types: long-lived branches and 
short-lived branches. Long-lived branches are used to represent the overall state 
of your codebase, such as production or staging environments. Short-lived 
branches are used for feature development, bug fixes, and other changes that are 
not yet ready for release.&lt;/p&gt;

&lt;p&gt;Using Gitflow, you can create a “develop” branch to represent the current state 
of your development work. When a feature or bug fix is ready for testing, it can 
be merged into the “develop” branch. Once the “develop” branch has accumulated 
enough changes, it can be merged into a “release” branch for final testing and 
then into the “master” branch for production release.&lt;/p&gt;

&lt;p&gt;Here’s an example of how to create a new feature branch using Gitflow:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git flow feature start new-feature&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This command creates a new branch named “feature/new-feature” based on the 
current state of the “develop” branch. You can then make changes to this branch 
and commit them as usual.&lt;/p&gt;

&lt;p&gt;When you’re done with the feature, you can use the following command to merge it 
back into the “develop” branch:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git flow feature finish new-feature&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This command merges the changes from the “feature/new-feature” branch into the 
“develop” branch and deletes the “feature/new-feature” branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;keep-branches-small-and-focused&quot;&gt;Keep Branches Small and Focused&lt;/h3&gt;

&lt;p&gt;When working on a feature or bug fix, it’s tempting to create a large branch that 
includes multiple changes. However, this can make it difficult to review and 
merge your code later. Instead, it’s best to keep your branches small and focused 
on a single change.&lt;/p&gt;

&lt;p&gt;Using small, focused branches makes it easier to review and merge changes because 
the changes are easier to understand. Additionally, small branches can be merged 
more quickly, reducing the time between when a change is completed and when it’s 
released.&lt;/p&gt;

&lt;p&gt;Here’s an example of how to create a new branch for a small change:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; fix-bug&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This command creates a new branch named “fix-bug” based on the current state of 
the branch you’re currently on. You can then make the necessary changes and 
commit them as usual.&lt;/p&gt;

&lt;p&gt;When you’re done with the change, you can use the following command to merge it 
back into the original branch:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git checkout original-branch
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git merge fix-bug&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This command merges the changes from the “fix-bug” branch into the 
“original-branch” branch.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;use-pull-requests-for-code-review&quot;&gt;Use Pull Requests for Code Review&lt;/h3&gt;

&lt;p&gt;Code review is an important part of maintaining code quality in your Rails app. 
Pull requests (PRs) are a Git feature that allows you to submit your changes for 
review before they are merged into a branch.&lt;/p&gt;

&lt;p&gt;Using PRs for code review has several benefits. First, it allows other members 
of your team to review your changes and provide feedback before they are merged. 
This can help catch bugs and improve the overall quality of your code. Second, 
PRs can be used to track of changes over time, making it easier to understand 
why certain decisions were made.&lt;/p&gt;

&lt;p&gt;To use PRs for code review, you can create a branch for your changes and then 
submit a pull request to the branch you want to merge your changes into. Other 
members of your team can then review your changes and provide feedback before 
the changes are merged.&lt;/p&gt;

&lt;p&gt;Here’s an example of how to create a pull request using GitHub:&lt;/p&gt;

&lt;p&gt;1 . Create a new branch for your changes:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; my-feature&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
2 . Push the branch to GitHub:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git push origin my-feature&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
3 . Create a pull request on GitHub:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to the repository on GitHub.&lt;/li&gt;
  &lt;li&gt;Click on the “Pull requests” tab.&lt;/li&gt;
  &lt;li&gt;Click on the “New pull request” button.&lt;/li&gt;
  &lt;li&gt;Select the branch you want to merge your changes into (e.g. “develop”).&lt;/li&gt;
  &lt;li&gt;Select the branch that contains your changes (e.g. “my-feature”).&lt;/li&gt;
  &lt;li&gt;Provide a description of the changes you made.&lt;/li&gt;
  &lt;li&gt;Submit the pull request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
Once the pull request is submitted, other members of your team can review the 
changes and provide feedback. You can make additional changes based on the 
feedback and push them to the same branch. GitHub will automatically update the 
pull request with the new changes.&lt;/p&gt;

&lt;p&gt;When the pull request is approved, you can merge the changes into the target 
branch. GitHub provides an option to merge the changes using a merge commit, 
which creates a new commit that represents the merge. This commit includes a 
message that summarizes the changes that were merged, making it easier to 
understand the history of the code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;use-rebase-to-keep-branches-up-to-date&quot;&gt;Use Rebase to Keep Branches Up-to-Date&lt;/h3&gt;

&lt;p&gt;When working on a long-lived branch, such as the “develop” branch, it’s important 
to keep it up-to-date with the latest changes from other branches. This can be 
done using the “merge” command, which combines the changes from two branches into 
a new commit.&lt;/p&gt;

&lt;p&gt;However, merging can create a messy history, with multiple merge commits that 
make it difficult to understand the changes over time. To avoid this, you can use 
the “rebase” command instead.&lt;/p&gt;

&lt;p&gt;Rebasing takes the changes from one branch and applies them on top of another 
branch. This creates a linear history, with a single branch representing the 
changes over time. Rebasing can make it easier to understand the history of your 
code and to identify the cause of bugs or issues.&lt;/p&gt;

&lt;p&gt;Here’s an example of how to use rebase to keep your branch up-to-date:&lt;/p&gt;

&lt;p&gt;1 . Checkout the branch you want to rebase:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git checkout my-feature&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
2 . Fetch the latest changes from the remote repository:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git fetch origin&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
3 . Rebase your changes on top of the latest changes:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git rebase origin/develop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This command takes the changes in your “my-feature” branch and applies them on 
top of the latest changes in the “develop” branch.&lt;/p&gt;

&lt;p&gt;After the rebase is complete, you may need to resolve any conflicts that arise. 
Once the conflicts are resolved, you can push your changes to the remote 
repository using the “push” command.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Using Git effectively is essential for maintaining code quality and collaborating 
with others on your Rails app. By following these best practices for Git workflows 
and branch management, you can ensure that your code is well-organized, easy to 
understand, and ready for release.&lt;/p&gt;

&lt;p&gt;Remember to use a branching model, keep branches small and focused, use pull 
requests for code review, and use rebase to keep your branches up-to-date. With 
these practices in place, you’ll be well on your way to developing high-quality 
Rails apps that are easy to maintain and extend.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="vcs" /><summary type="html">Introduction</summary></entry><entry><title type="html">An Overview of RESTful API Design Principles in Rails</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/an-overview-of-restful-api-design-principles-in-rails" rel="alternate" type="text/html" title="An Overview of RESTful API Design Principles in Rails" /><published>2023-04-29T13:00:00+03:00</published><updated>2023-04-29T13:00:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/an-overview-of-restful-api-design-principles-in-rails</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/an-overview-of-restful-api-design-principles-in-rails">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;With the rise of web applications, the need for APIs has increased in the software 
development industry. RESTful APIs are widely used because of their simplicity, 
scalability, and compatibility with HTTP. RESTful APIs can be implemented in any 
programming language or framework, including Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Rails is a popular web application framework that provides out-of-the-box support 
for RESTful APIs. In this article, we will discuss the principles of RESTful API 
design in Rails and provide an overview of the tools and techniques used in their 
implementation.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;restful-api-principles&quot;&gt;RESTful API Principles&lt;/h3&gt;

&lt;p&gt;REST stands for Representational State Transfer, which is a set of principles used 
to design web services. RESTful APIs follow the following principles:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;1--resource-oriented-architecture&quot;&gt;1 . Resource-Oriented Architecture&lt;/h4&gt;

&lt;p&gt;RESTful APIs are based on resources that represent a collection of related objects. 
Each resource is identified by a unique URI, and the interactions with the resource 
are defined by HTTP methods like GET, POST, PUT, and DELETE.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;2--client-server-model&quot;&gt;2 . Client-Server Model&lt;/h4&gt;

&lt;p&gt;RESTful APIs follow the client-server model, where the client initiates the request, 
and the server responds with the data. The server-side application exposes a set 
of endpoints that can be accessed by the client.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;3--stateless&quot;&gt;3 . Stateless&lt;/h4&gt;
&lt;p&gt;RESTful APIs are stateless, meaning that each request is treated independently of 
the previous request. The server does not store any client-specific data between 
requests, and each request must contain all the necessary information to fulfill 
the request.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;4--cacheable&quot;&gt;4 . Cacheable&lt;/h4&gt;

&lt;p&gt;RESTful APIs are designed to be cacheable, meaning that the response to a request 
can be cached by the client or a proxy server. This reduces the number of requests 
sent to the server and improves the performance of the application.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;5--uniform-interface&quot;&gt;5 . Uniform Interface&lt;/h4&gt;

&lt;p&gt;RESTful APIs have a uniform interface, which means that the interaction between 
the client and server is standardized. The interface includes the use of HTTP 
methods, resource URIs, media types, and response codes.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;implementing-restful-apis-in-rails&quot;&gt;Implementing RESTful APIs in Rails&lt;/h3&gt;

&lt;p&gt;Rails provides a framework for building RESTful APIs that follow the above 
principles. Rails implements RESTful routing, which means that it maps HTTP 
requests to controller actions based on the HTTP method and the resource URI.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;1--defining-resources&quot;&gt;1 . Defining Resources&lt;/h4&gt;

&lt;p&gt;In Rails, resources are defined in the routes.rb file. The resources method 
generates a set of RESTful routes for a given controller. For example, the 
following code defines a resource for a blog post:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will generate the following RESTful routes:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/posts
GET /&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/posts
PUT /&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/posts/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;2--using-http-methods&quot;&gt;2 . Using HTTP Methods&lt;/h4&gt;

&lt;p&gt;HTTP methods are used to interact with the resources in Rails. The following 
table shows the HTTP methods and their corresponding controller actions:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;style&gt;
  th {
    background-color: lightgrey;
  }
  table {
    border-collapse: collapse;
    border: 1px solid black;
    margin: 0 auto;
  }
  td, th {
    padding: 8px;
    border: 1px solid black;
  }
&lt;/style&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;HTTP Method&lt;/th&gt;
      &lt;th&gt;Controller Action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;index, show&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;create&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;update&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;destroy&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
For example, the following code defines a controller action for retrieving all 
blog posts:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This code will respond to a GET request to /posts and return a JSON representation of all blog posts.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;3--handling-errors&quot;&gt;3 . Handling Errors&lt;/h4&gt;

&lt;p&gt;Rails provides a set of HTTP response codes that should be used to indicate the 
status of the request. The following table shows the HTTP response codes and 
their meaning:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;HTTP Response Code&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;200&lt;/td&gt;
      &lt;td&gt;OK&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;201&lt;/td&gt;
      &lt;td&gt;Created&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;204&lt;/td&gt;
      &lt;td&gt;No Content&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;400&lt;/td&gt;
      &lt;td&gt;Bad Request&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;401&lt;/td&gt;
      &lt;td&gt;Unauthorized&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;403&lt;/td&gt;
      &lt;td&gt;Forbidden&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;404&lt;/td&gt;
      &lt;td&gt;Not Found&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;500&lt;/td&gt;
      &lt;td&gt;Internal Server Error&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
For example, the following code handles a not found error in Rails:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;API&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rescue_from&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordNotFound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;error: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Record not found&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status: :not_found&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This code will return a JSON response with an error message and a 404 status code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;API&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rescue_from&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RecordNotFound&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;error: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Record not found&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status: :not_found&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;4--versioning&quot;&gt;4 . Versioning&lt;/h4&gt;
&lt;p&gt;RESTful APIs often need to evolve over time, and versioning is used to manage 
these changes. Rails provides a mechanism for versioning APIs by specifying the 
version in the URI. For example, the following code defines a versioned resource:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:api&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:v1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will generate the following URIs for the posts resource:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/api/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/api/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/api/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PUT&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/api/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/api/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;5--authentication-and-authorization&quot;&gt;5 . Authentication and Authorization&lt;/h4&gt;
&lt;p&gt;RESTful APIs often require authentication and authorization to restrict access 
to resources. Rails provides several authentication and authorization gems, 
such as Devise and CanCanCan. These gems can be used to handle authentication 
and authorization in Rails.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;RESTful APIs are an essential part of modern web applications, and they are 
widely used by developers to build scalable and maintainable systems. Rails 
provides an excellent framework for building RESTful APIs, and it has become a 
popular choice for developers due to its simplicity and flexibility.&lt;/p&gt;

&lt;p&gt;When designing RESTful APIs in Rails, it is important to follow the principles 
of REST and use the tools and techniques provided by the framework. This includes 
defining resources, using HTTP methods, handling errors, versioning, and 
implementing authentication and authorization.&lt;/p&gt;

&lt;p&gt;By following these principles and using the tools provided by Rails, developers 
can build high-quality and scalable RESTful APIs that are easy to maintain and 
extend. However, it is important to keep in mind that designing RESTful APIs is 
an ongoing process, and it requires constant evaluation and iteration to ensure 
that it meets the changing needs of the application and its users.&lt;/p&gt;

&lt;p&gt;In conclusion, RESTful API design principles in Rails are an essential part of 
building modern web applications. By following these principles and using the 
tools provided by Rails, developers can build scalable and maintainable systems 
that provide a seamless experience for their users.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">How to use ActiveJob for background processing in Rails</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/how-to-use-activejob-for-background-processing-in-rails" rel="alternate" type="text/html" title="How to use ActiveJob for background processing in Rails" /><published>2023-04-22T13:30:00+03:00</published><updated>2023-04-22T13:30:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/how-to-use-activejob-for-background-processing-in-rails</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/how-to-use-activejob-for-background-processing-in-rails">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Background processing is an essential component of modern web applications. 
With the growing demand for high-performance applications, background processing 
is becoming increasingly important to handle long-running or resource-intensive 
tasks, such as sending emails, processing files, or generating reports. In the 
Ruby on Rails framework, ActiveJob is a convenient and straightforward way to 
perform background processing. ActiveJob provides a unified interface to work 
with different queuing backends, such as Delayed Job, Resque, or Sidekiq.&lt;/p&gt;

&lt;p&gt;In this section, we will explore how to use ActiveJob for background processing in Rails.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-is-activejob&quot;&gt;What is ActiveJob?&lt;/h3&gt;

&lt;p&gt;ActiveJob is a high-level interface for declaring, enqueuing, and executing 
background jobs in Rails applications. It is part of the Rails framework and 
abstracts away the differences between different queuing backends, allowing 
developers to switch between them with minimal effort.&lt;/p&gt;

&lt;p&gt;ActiveJob defines a simple API that developers can use to define jobs, specify 
parameters, and enqueue them for execution. Once a job is enqueued, ActiveJob 
takes care of dispatching it to the selected queuing backend, and then executing 
it asynchronously. ActiveJob also provides mechanisms for handling retries, 
failures, and monitoring the status of jobs.&lt;/p&gt;

&lt;p&gt;ActiveJob supports a wide range of queuing backends, including in-process queuing, 
database-backed queuing, and external queuing systems such as RabbitMQ, Amazon SQS, 
or Google Cloud Pub/Sub. This flexibility makes ActiveJob an excellent choice for 
any Rails application that needs to perform background processing.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;a-creating-an-activejob&quot;&gt;a). Creating an ActiveJob&lt;/h3&gt;

&lt;p&gt;To create a new ActiveJob, we can use the &lt;span class=&quot;badge&quot;&gt;rails generate job
&lt;/span&gt; command. This will 
generate a new job file in the &lt;span class=&quot;badge&quot;&gt;app/jobs&lt;/span&gt; directory of 
our Rails application. For example, to create a job called &lt;span class=&quot;badge&quot;&gt;
NotificationJob&lt;/span&gt;, we can run:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-terminal&quot; data-lang=&quot;terminal&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;rails generate job Notification&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will create a file called &lt;span class=&quot;badge&quot;&gt;notification_job.rb&lt;/span&gt; in 
the &lt;span class=&quot;badge&quot;&gt;app/jobs&lt;/span&gt; directory, with the following contents:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotificationJob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationJob&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;queue_as&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Do something later&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This file defines a new job class called &lt;span class=&quot;badge&quot;&gt;NotificationJob&lt;/span&gt;, 
which inherits from &lt;span class=&quot;badge&quot;&gt;ApplicationJob&lt;/span&gt;, the base class for 
all ActiveJobs in the Rails application. The queue_as method specifies the queue 
in which the job will be enqueued. In this case, we use the &lt;span class=&quot;badge&quot;&gt;
:default queue&lt;/span&gt;, which is the default queue for the selected queuing backend.&lt;/p&gt;

&lt;p&gt;The &lt;span class=&quot;badge&quot;&gt;perform&lt;/span&gt; method is the entry point for the job. 
This method will be called asynchronously when the job is executed, and it can 
receive any number of arguments. Inside this method, we can implement the logic 
for the job, which can include database operations, HTTP requests, or any other 
kind of processing.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;b-enqueuing-a-job&quot;&gt;b). Enqueuing a job&lt;/h3&gt;

&lt;p&gt;To enqueue a job, we can create a new instance of the job class and call the 
&lt;span class=&quot;badge&quot;&gt;perform_later&lt;/span&gt; method on it. For example, to enqueue a 
&lt;span class=&quot;badge&quot;&gt;NotificationJob&lt;/span&gt; with the argument “Hello, world!”, we 
can write:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;NotificationJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform_later&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will add a new job to the queue, which will be executed asynchronously by 
ActiveJob.&lt;/p&gt;

&lt;p&gt;By default, ActiveJob uses the Async queuing backend, which performs background 
processing in the same process as the Rails application. This can be useful for 
development or testing, but it is not recommended for production environments, 
where a separate queuing backend should be used.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;c-configuring-the-queuing-backend&quot;&gt;c). Configuring the queuing backend&lt;/h3&gt;

&lt;p&gt;ActiveJob supports several queuing backends, each with its own advantages and 
disadvantages. The most common queuing backends are Delayed Job, Resque, and 
Sidekiq, which provide more robust and scalable background processing than the 
default Async backend. In this section, we will explore how to configure 
ActiveJob to use these queuing backends.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;i-delayed-job&quot;&gt;i). Delayed Job&lt;/h3&gt;

&lt;p&gt;Delayed Job is a popular queuing backend for Rails applications. It provides a 
simple way to perform background processing using a separate process or thread 
pool. To use Delayed Job with ActiveJob, we need to add the &lt;span class=&quot;badge&quot;&gt;
delayed_job&lt;/span&gt; gem to our Gemfile and run &lt;span class=&quot;badge&quot;&gt;bundle install
&lt;/span&gt;. Then, we can configure ActiveJob to use the Delayed Job backend by 
setting the &lt;span class=&quot;badge&quot;&gt;queue_adapter&lt;/span&gt; option in our application 
configuration:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/application.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;queue_adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:delayed_job&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
With this configuration, ActiveJob will use the Delayed Job backend to enqueue 
and execute jobs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;ii-resque&quot;&gt;ii). Resque&lt;/h3&gt;

&lt;p&gt;Resque is another queuing backend for Rails applications, based on Redis. It 
provides a scalable and fault-tolerant way to perform background processing, with 
support for job priorities, job dependencies, and job retries. To use Resque with 
ActiveJob, we need to add the &lt;span class=&quot;badge&quot;&gt;resque&lt;/span&gt; and 
&lt;span class=&quot;badge&quot;&gt;resque-scheduler&lt;/span&gt; gems to our Gemfile and run 
&lt;span class=&quot;badge&quot;&gt;bundle install&lt;/span&gt;. Then, we can configure ActiveJob to 
use the Resque backend by setting the &lt;span class=&quot;badge&quot;&gt;queue_adapter&lt;/span&gt; 
option in our application configuration:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/application.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;queue_adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:resque&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
With this configuration, ActiveJob will use the Resque backend to enqueue and 
execute jobs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;iii-sidekiq&quot;&gt;iii). Sidekiq&lt;/h3&gt;

&lt;p&gt;Sidekiq is a powerful and popular queuing backend for Rails applications, based 
on Redis and multi-threading. It provides a fast and efficient way to perform 
background processing, with support for job retries, job batching, and job 
scheduling. To use Sidekiq with ActiveJob, we need to add the &lt;span class=&quot;badge&quot;&gt;
sidekiq&lt;/span&gt; gem to our Gemfile and run &lt;span class=&quot;badge&quot;&gt;bundle install&lt;/span&gt;. 
Then, we can configure ActiveJob to use the Sidekiq backend by setting the 
&lt;span class=&quot;badge&quot;&gt;queue_adapter&lt;/span&gt; option in our application configuration:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# config/application.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;active_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;queue_adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sidekiq&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
With this configuration, ActiveJob will use the Sidekiq backend to enqueue and 
execute jobs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;ActiveJob is a powerful and flexible way to perform background processing in 
Rails applications. It provides a unified interface for working with different 
queuing backends, allowing developers to switch between them with minimal effort. 
By using ActiveJob, we can offload long-running or resource-intensive tasks from 
the main request-response cycle, improving the performance and scalability of our 
applications. With the support for retries, failures, and monitoring, ActiveJob 
makes it easy to build robust and fault-tolerant background processing workflows.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Building a Scalable and Fault-tolerant Rails Application Architecture</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/building-a-scalable-and-fault-tolerant-rails-application-architecture.markdown" rel="alternate" type="text/html" title="Building a Scalable and Fault-tolerant Rails Application Architecture" /><published>2023-04-15T16:00:00+03:00</published><updated>2023-04-15T16:00:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/building-a-scalable%20and-fault-tolerant-rails-application-architecture.markdown</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/building-a-scalable-and-fault-tolerant-rails-application-architecture.markdown">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Rails is a popular web application framework that has been widely adopted by 
developers for building scalable and fault-tolerant web applications. Building a 
scalable and fault-tolerant Rails application architecture requires careful 
planning and implementation to ensure that the application can handle increased 
traffic and maintain uptime even in the face of unexpected failures.&lt;/p&gt;

&lt;p&gt;In this article, we’ll explore some key considerations for building a scalable 
and fault-tolerant Rails application architecture.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;1--use-a-load-balancer&quot;&gt;1 . Use a Load Balancer&lt;/h3&gt;

&lt;p&gt;One of the first things you should consider when building a scalable and fault-tolerant 
Rails application architecture is the use of a load balancer. A load balancer 
helps distribute incoming traffic evenly across multiple servers, ensuring that 
no single server becomes overloaded.&lt;/p&gt;

&lt;p&gt;There are several load balancers available for Rails applications, including 
software-based solutions like HAProxy and NGINX, and cloud-based solutions like 
AWS Elastic Load Balancer (ELB) and Google Cloud Load Balancing. Regardless of 
which load balancer you choose, it’s important to configure it correctly to ensure 
that it can handle increased traffic and failover to backup servers in the event 
of a failure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2--use-multiple-web-servers&quot;&gt;2 . Use Multiple Web Servers&lt;/h3&gt;

&lt;p&gt;Another key component of a scalable and fault-tolerant Rails application architecture 
is the use of multiple web servers. By deploying your Rails application across 
multiple servers, you can ensure that your application can handle increased traffic 
and maintain uptime even in the face of unexpected failures.&lt;/p&gt;

&lt;p&gt;There are several ways to deploy a Rails application across multiple web servers, 
including using a cloud-based infrastructure like AWS or Google Cloud Platform, 
or using a container orchestration platform like Kubernetes or Docker Swarm.&lt;/p&gt;

&lt;p&gt;Regardless of which deployment strategy you choose, it’s important to configure 
your servers correctly to ensure that they can handle increased traffic and 
failover to backup servers in the event of a failure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3--use-a-database-replication-strategy&quot;&gt;3 . Use a Database Replication Strategy&lt;/h3&gt;

&lt;p&gt;A database replication strategy is another key component of a scalable and 
fault-tolerant Rails application architecture. By replicating your database across 
multiple servers, you can ensure that your application can handle increased traffic 
and maintain uptime even in the face of unexpected failures.&lt;/p&gt;

&lt;p&gt;There are several database replication strategies available for Rails applications, 
including master-slave replication and multi-master replication. Regardless of 
which replication strategy you choose, it’s important to configure your database 
servers correctly to ensure that they can handle increased traffic and failover 
to backup servers in the event of a failure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4--use-caching&quot;&gt;4 . Use Caching&lt;/h3&gt;

&lt;p&gt;Caching is another important component of a scalable and fault-tolerant Rails 
application architecture. By caching frequently accessed data, you can reduce the 
load on your servers and improve application performance.&lt;/p&gt;

&lt;p&gt;There are several caching strategies available for Rails applications, including 
in-memory caching, file-based caching, and distributed caching using tools like 
Redis or Memcached. Regardless of which caching strategy you choose, it’s important 
to configure your caching layer correctly to ensure that it can handle increased 
traffic and failover to backup servers in the event of a failure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;5--choose-the-right-infrastructure-provider&quot;&gt;5 . Choose The Right Infrastructure Provider&lt;/h3&gt;

&lt;p&gt;Cloud providers like AWS, Google Cloud Platform, and Microsoft Azure offer a wide 
range of tools and services that can help you build a highly available and scalable 
architecture. These cloud providers offer tools like load balancers, auto-scaling 
groups, and managed databases that can help you quickly and easily scale your 
application as needed.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;6--use-a-microservices-architecture&quot;&gt;6 . Use a Microservices Architecture&lt;/h3&gt;

&lt;p&gt;With a microservices architecture, your application is broken down into smaller, 
independent services, each with its own database and API. This allows you to scale 
individual services as needed, and also makes it easier to troubleshoot and debug 
issues when they arise.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;7--monitor-and-analyze-application-performance&quot;&gt;7 . Monitor and Analyze Application Performance&lt;/h3&gt;

&lt;p&gt;Finally, it’s important to monitor and analyze the performance of your Rails 
application on an ongoing basis. By tracking key performance metrics like response 
time, throughput, and error rate, you can identify potential performance bottlenecks 
and take action to address them before they impact application availability.&lt;/p&gt;

&lt;p&gt;There are several monitoring and analysis tools available for Rails applications, 
including New Relic, AppSignal, and Scout. Regardless of which tool you choose, 
it’s important to configure it correctly and regularly review performance metrics 
to ensure that your application is running smoothly.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In conclusion, building a scalable and fault-tolerant Rails application architecture 
requires careful planning, implementation, and ongoing monitoring. By using a load 
balancer, deploying multiple web servers, implementing a database replication 
strategy, using caching, and monitoring application performance, you can ensure 
that your application can handle increased traffic and maintain uptime even in 
the face of unexpected failures. Additionally, choosing the right infrastructure 
provider and using a microservices architecture can help you quickly and easily 
scale your application as needed.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Optimizing Database Performance in Rails: Tips and Tricks</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/optimizing-database-performance-in-rails" rel="alternate" type="text/html" title="Optimizing Database Performance in Rails: Tips and Tricks" /><published>2023-04-08T10:00:00+03:00</published><updated>2023-04-08T10:00:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/optimizing-database-performance-in-rails</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/optimizing-database-performance-in-rails">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;As your Rails application grows, database performance can become a bottleneck. 
Slow queries and inefficient database operations can negatively impact the user 
experience and make your application feel sluggish. In this article, we will discuss 
tips and tricks for optimizing database performance in Rails.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-use-indexes&quot;&gt;1. Use indexes&lt;/h3&gt;

&lt;p&gt;Indexes can significantly improve query performance. Ensure that the columns 
commonly used in WHERE clauses, JOINs, and ORDER BY clauses are indexed. 
To create an index, you can use the Rails migration generator:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;add_index&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will create an index on the email column of the users table.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-avoid-n1-queries&quot;&gt;2. Avoid N+1 queries&lt;/h3&gt;

&lt;p&gt;N+1 queries occur when a query is executed for each record in a collection. 
This can lead to a large number of queries and significantly slow down your application. 
Use eager loading to preload associated records and avoid this issue. 
You can use the includes method to eager load associations:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will preload the posts association for all User records in a single query.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-use-caching&quot;&gt;3. Use caching&lt;/h3&gt;

&lt;p&gt;Caching can improve performance by reducing the number of queries made to the database. 
Consider using Rails caching mechanisms like fragment caching, low-level caching, 
and page caching. You can use the cache method to cache fragments of views:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- user profile content --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will cache the user profile content for the specified user.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-use-database-specific-features&quot;&gt;4. Use database-specific features&lt;/h3&gt;

&lt;p&gt;Different databases have specific features that can be used to optimize performance. 
For example, PostgreSQL has full-text search capabilities, while MySQL has spatial 
data indexing. Use these features to your advantage when building your application.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-use-database-connection-pooling&quot;&gt;5. Use database connection pooling&lt;/h3&gt;

&lt;p&gt;Connection pooling can improve database performance by reusing database connections 
rather than creating new ones for each request. You can use the connection_pool 
method to manage database connections:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_connection&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# database operation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will ensure that the database connection is reused for subsequent database operations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;6-optimize-queries&quot;&gt;6. Optimize queries&lt;/h3&gt;

&lt;p&gt;Write efficient queries that use appropriate SELECT statements, WHERE clauses, and JOINs. 
Avoid using complex ORMs for complex queries, as they can be slow and inefficient. 
Consider writing custom SQL queries instead.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-use-pagination&quot;&gt;7. Use pagination&lt;/h3&gt;

&lt;p&gt;Limit the number of records returned by a query by using pagination. 
This can significantly improve performance for large datasets. You can use the 
&lt;span class=&quot;badge&quot;&gt;will_paginate&lt;/span&gt; gem to implement pagination:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;page: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;per_page: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will limit the number of User records returned to 10 per page.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;8-monitor-database-performance&quot;&gt;8. Monitor database performance&lt;/h3&gt;

&lt;p&gt;Use tools like New Relic or Scout to monitor database performance and identify 
slow queries or other performance bottlenecks. This will help you identify areas 
of your application that need optimization.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;9-use-background-processing&quot;&gt;9. Use background processing&lt;/h3&gt;

&lt;p&gt;Move expensive database operations, like sending emails or generating reports, 
to background jobs using tools like Sidekiq or Resque. This will improve the overall 
performance of your application by offloading CPU-intensive tasks to a separate process.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In conclusion, optimizing database performance is an important aspect of building 
a high-performance Rails application. By following these tips and tricks, you can 
improve the performance of your application and provide a better user experience for your users.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Common Vulnerabilities and Best Practices for Rails Security</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/common-vulnerabilities-and-best-practices-for-rails-security" rel="alternate" type="text/html" title="Common Vulnerabilities and Best Practices for Rails Security" /><published>2023-04-01T18:30:00+03:00</published><updated>2023-04-01T18:30:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/common-vulnerabilities-and-best-practices-for-rails-security</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202304/common-vulnerabilities-and-best-practices-for-rails-security">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Ruby on Rails is a powerful and popular web development framework that has gained 
a reputation for being secure. However, like any web application, a Rails app is 
vulnerable to security attacks if it is not properly secured. Rails security is 
a vast topic, but there are some common vulnerabilities and best practices that 
you should be aware of to make your application secure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;common-rails-security-vulnerabilities&quot;&gt;Common Rails Security Vulnerabilities&lt;/h3&gt;

&lt;p&gt;1 . Cross-Site Scripting (XSS) Attacks: It is a type of security vulnerability 
that allows an attacker to inject malicious code into a web page viewed by other users. 
Rails has built-in protections against XSS attacks, but it is essential to 
sanitize user input properly to prevent these attacks.&lt;/p&gt;

&lt;p&gt;For example, consider a form where users can input their name. If the form does 
not validate the input and sanitize it properly, an attacker can inject a malicious 
script as their name, which can then execute on the user’s browser when the page loads. 
Rails provides built-in sanitization methods like sanitize and strip_tags to prevent XSS attacks.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
2 . SQL Injection Attacks: This type of attack occurs when an attacker inserts 
malicious SQL code into a query. Rails provides built-in protection against SQL 
injection attacks through Active Record. Still, it’s necessary to ensure that 
user input is properly validated and sanitized.&lt;/p&gt;

&lt;p&gt;For example, consider a form where users can search for products by entering keywords. 
If the search form does not validate and sanitize the input properly, an attacker 
can inject malicious SQL code into the query, which can then execute on the server 
and potentially allow the attacker to access sensitive data. Rails provides 
built-in protection against SQL injection attacks through parameterized queries.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
3 . Cross-Site Request Forgery (CSRF) Attacks: In this type of attack, the attacker 
tricks the user into performing an action without their consent. Rails provides 
built-in protection against CSRF attacks through CSRF tokens.&lt;/p&gt;

&lt;p&gt;For example, consider a form where users can update their account information. 
If the form does not include a CSRF token, an attacker can trick the user into 
submitting the form by luring them to a malicious website that sends the form 
data to the server. Rails provides built-in protection against CSRF attacks by 
generating a unique CSRF token for each form and requiring it to be included in the form data.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;best-practices-for-rails-security&quot;&gt;Best Practices for Rails Security:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Input validation and sanitization: You should always validate and sanitize user 
input to prevent security vulnerabilities like XSS and SQL injection attacks. 
Rails provides built-in sanitization methods like sanitize and strip_tags to 
prevent XSS attacks, and parameterized queries to prevent SQL injection attacks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use strong authentication and authorization: Implementing strong authentication 
and authorization practices can help protect your Rails app against unauthorized access. 
Use strong passwords and hash them properly to prevent password-related attacks. 
You can use libraries like Devise or Authlogic to implement authentication and authorization in your Rails app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use HTTPS: Always use HTTPS to ensure that data transmitted between the server 
and the client is encrypted. Use libraries like OpenSSL to configure HTTPS in your Rails app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep your Rails app up-to-date: Regularly update your Rails app and its 
dependencies to ensure that any security vulnerabilities are patched. You can use 
libraries like Bundler and Dependabot to manage your app’s dependencies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use third-party libraries judiciously: Always check the reputation of third-party 
libraries before using them in your Rails app. Use libraries that have a good 
track record, are well-maintained, and have been reviewed by the community.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In conclusion, Rails security is a complex topic that requires constant vigilance. 
By following best practices and regularly updating your app, you can make your 
Rails application secure against common security vulnerabilities. Always validate&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry><entry><title type="html">Caching in Rails</title><link href="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202303/caching-in-rails" rel="alternate" type="text/html" title="Caching in Rails" /><published>2023-03-26T11:40:00+03:00</published><updated>2023-03-26T11:40:00+03:00</updated><id>http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202303/caching-in-rails</id><content type="html" xml:base="http://0.0.0.0:4000/category/frameworks/ruby-on-rails/concepts/202303/caching-in-rails">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Rails provides several types of caching to help improve the performance of your 
application. The three most commonly used types of caching are fragment caching, 
action caching, and HTTP caching. Let’s take a closer look at each type of caching 
and when to use it.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;page-caching&quot;&gt;Page Caching&lt;/h3&gt;

&lt;p&gt;Page caching is the simplest form of caching available in Rails 7. It involves 
saving the entire HTML response of a page to a file and serving the same file for 
subsequent requests. This type of caching is useful for pages that don’t have any 
dynamic content, such as homepages, about us pages, or other static pages.&lt;/p&gt;

&lt;p&gt;To enable page caching, you can use the caches_page method in your controller, like this:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;caches_page&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# code to render the page&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
In this example, the &lt;span class=&quot;badge&quot;&gt;caches_page&lt;/span&gt; method caches the 
HTML response for the &lt;span class=&quot;badge&quot;&gt;index&lt;/span&gt; action of the 
&lt;span class=&quot;badge&quot;&gt;HomeController&lt;/span&gt; class. Whenever a user requests 
the &lt;span class=&quot;badge&quot;&gt;index&lt;/span&gt; page, Rails will serve the cached HTML 
response instead of rendering the page again.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;fragment-caching&quot;&gt;Fragment Caching:&lt;/h3&gt;

&lt;p&gt;Fragment caching is used to cache parts of a view that are expensive to generate. 
For example, if you have a page that includes a list of articles and each article 
has many comments, rendering the page may take a long time if you have to load 
all the comments for each article on every request. To speed up the rendering process, 
you can use fragment caching to cache the comments for each article separately.&lt;/p&gt;

&lt;p&gt;To use fragment caching, wrap the expensive code in a cache block like this:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;article.comments&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;article.comments&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will cache the output of the expensive code and use it on subsequent requests, 
avoiding the need to regenerate it each time. In this example, the comments for 
each article are cached separately, so if a new comment is added to one of the articles, 
only the cached fragment for that article will be invalidated.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;action-caching&quot;&gt;Action Caching:&lt;/h3&gt;

&lt;p&gt;Action Caching works like Page Caching except the incoming web request hits the 
Rails stack so that &lt;span class=&quot;badge&quot;&gt;before&lt;/span&gt; filters can be run on it 
before the cache is served.&lt;/p&gt;

&lt;p&gt;This ensures that any actions needing to take place before the cached copy is hit 
can be performed. Therefore increasing performance while taking into account the 
functionality required to access parts of your application.&lt;/p&gt;

&lt;p&gt;Suppose you have a before filter that checks whether the user is authorized to 
view the article. If the user is authorized, the cached copy of the article is 
served, and if the user is not authorized, the before filter redirects the user 
to the login page.&lt;/p&gt;

&lt;p&gt;Here’s an example of how you can use Action Caching in your Rails 7 application:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArticlesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:authenticate_user!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;except: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... other code to render the article page ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cache_action&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cache_action&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Cache-Control&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;public, max-age=300&apos;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expires_in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
In this example, we have a &lt;span class=&quot;badge&quot;&gt;before_action :authenticate_user!&lt;/span&gt;, 
which ensures that only authenticated users can view the article. In the show 
action, we use cache_action to cache the output of the action for 5 minutes, 
but only if the current user is not an admin. This ensures that non-admin users 
get the cached copy of the article, and the before_filter 
&lt;span class=&quot;badge&quot;&gt;:authenticate_user!&lt;/span&gt; is executed before serving the cached copy.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;http-caching&quot;&gt;HTTP Caching:&lt;/h3&gt;

&lt;p&gt;HTTP caching is used to cache responses from the server and avoid unnecessary 
network requests. For example, if you have a page that displays a list of products, 
you can use HTTP caching to allow the client to cache the response and avoid 
downloading unnecessary data.&lt;/p&gt;

&lt;p&gt;To use HTTP caching, add the following code to your controller action:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@products&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fresh_when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;last_modified: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@products&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maximum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;public: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
This will set the &lt;span class=&quot;badge&quot;&gt;Last-Modified&lt;/span&gt; and 
&lt;span class=&quot;badge&quot;&gt;ETag&lt;/span&gt; headers on the response, allowing the 
client to make conditional requests and avoid downloading unnecessary data. 
In this example, the response will be cached based on the 
&lt;span class=&quot;badge&quot;&gt;last_modified&lt;/span&gt; timestamp of the products, so if a new 
product is added or an existing product is updated, the cached response will be 
invalidated and regenerated.&lt;/p&gt;

&lt;p&gt;In addition to these types of caching, Rails also provides other caching mechanisms 
like low-level caching and Russian doll caching. Low-level caching is used to cache 
arbitrary objects, such as database queries or API responses. Russian doll caching 
is used to cache nested fragments of a view, which can be useful when you have 
complex views with many nested elements.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;When using caching in your Rails application, it’s important to consider the 
trade-offs between performance and complexity. Caching can significantly improve 
the performance of your application, but it can also introduce some complexity 
and potential issues, such as cache invalidation and cache consistency. 
Be sure to test your application thoroughly with caching enabled and monitor its 
performance to ensure that it’s working as expected.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;em&gt;Thanks for reading, see you in the next one!&lt;/em&gt;&lt;/p&gt;</content><author><name>Denis Kobare</name></author><category term="frameworks" /><summary type="html">Introduction</summary></entry></feed>